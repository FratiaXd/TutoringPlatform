@using System.ComponentModel.DataAnnotations
@inject UserManager<TutoringPlatformUser> UserManager
@inject ILogger<EditStudentPassword> Logger
@inject SignInManager<TutoringPlatformUser> SignInManager

<EditForm Model="Input" FormName="change-password" OnValidSubmit="OnValidSubmitAsync" method="post">
    <DataAnnotationsValidator />
    <ValidationSummary class="text-danger" role="alert" />
    <div class="form-floating mb-3">
        <InputText type="password" @bind-Value="Input.OldPassword" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Please enter your old password." />
        <label for="old-password" class="form-label">Old password</label>
        <ValidationMessage For="() => Input.OldPassword" class="text-danger" />
    </div>
    <div class="form-floating mb-3">
        <InputText type="password" @bind-Value="Input.NewPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please enter your new password." />
        <label for="new-password" class="form-label">New password</label>
        <ValidationMessage For="() => Input.NewPassword" class="text-danger" />
    </div>
    <div class="form-floating mb-3">
        <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please confirm your new password." />
        <label for="confirm-password" class="form-label">Confirm password</label>
        <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
    </div>
    <button type="submit" class="w-100 btn btn-lg btn-primary">Update password</button>
</EditForm>

@code {
    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public bool IsUserAdmin { get; set; }

    [Parameter]
    public EventCallback OnClosed { get; set; }

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private TutoringPlatformUser editUser;

    protected override async Task OnInitializedAsync()
    {
        editUser = await UserManager.FindByIdAsync(Id);
    }

    private async Task OnValidSubmitAsync()
    {
        var changePasswordResult = await UserManager.ChangePasswordAsync(editUser, Input.OldPassword, Input.NewPassword);
        if (!changePasswordResult.Succeeded)
        {
            return;
        }

        if (!IsUserAdmin)
        {
            await SignInManager.RefreshSignInAsync(editUser);
        }

        Logger.LogInformation("User password changed successfully.");
        await OnClosed.InvokeAsync(null);
    }

    private sealed class InputModel
    {
        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Current password")]
        public string OldPassword { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "New password")]
        public string NewPassword { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm new password")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}