@if (!string.IsNullOrEmpty(message))
{
    <div class="t-flex t-justify-center t-items-center t-p-4 t-mb-3 t-text-sm t-text-red-800 t-border t-border-red-300 t-rounded-lg t-bg-red-50" role="alert">
        <svg class="t-flex-shrink-0 t-inline t-w-4 t-h-4 me-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
            <path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5ZM9.5 4a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3ZM12 15H8a1 1 0 0 1 0-2h1v-3H8a1 1 0 0 1 0-2h2a1 1 0 0 1 1 1v4h1a1 1 0 0 1 0 2Z" />
        </svg>
        <span class="t-sr-only">Info</span>
        <div>
            <span class="t-font-medium">@message</span> Change a few things up and try submitting again.
        </div>
    </div>
}

<EditForm Model="Input" FormName="change-password" OnValidSubmit="OnValidSubmitAsync" method="post">
    <DataAnnotationsValidator />
    @if (!IsUserAdmin)
    {
        <div class="t-mb-3">
            <label for="old-password" class="t-block t-mb-1 t-ml-1 t-text-base t-font-medium t-text-gray-600 dark:t-text-white">Old password</label>
            <InputText type="password" @bind-Value="Input.OldPassword" class="t-bg-gray-50 t-border t-border-gray-300 t-text-gray-900 t-text-sm t-rounded-lg focus:t-ring-blue-500 focus:t-border-blue-500 t-block t-w-full md:t-min-w-112 t-p-3" autocomplete="current-password" aria-required="true" placeholder="Please enter your old password." />
            <ValidationMessage For="() => Input.OldPassword" class="text-danger" />
        </div>
    }
    else
    {
        <div class="t-mb-3">
            <label for="old-password" class="t-block t-mb-1 t-ml-1 t-text-base t-font-medium t-text-gray-600 dark:t-text-white">Admin Password</label>
            <InputText type="password" @bind-Value="Input.AdminPassword" class="t-bg-gray-50 t-border t-border-gray-300 t-text-gray-900 t-text-sm t-rounded-lg focus:t-ring-blue-500 focus:t-border-blue-500 t-block t-w-full md:t-min-w-112 t-p-3" autocomplete="current-password" aria-required="true" placeholder="Please enter admin password." />
            <ValidationMessage For="() => Input.AdminPassword" class="text-danger" />
        </div>
    }
    <div class="t-mt-2 t-mb-3">
        <label for="new-password" class="t-block t-mb-1 t-ml-1 t-text-base t-font-medium t-text-gray-600 dark:t-text-white">New password</label>
        <InputText type="password" @bind-Value="Input.NewPassword" class="t-bg-gray-50 t-border t-border-gray-300 t-text-gray-900 t-text-sm t-rounded-lg focus:t-ring-blue-500 focus:t-border-blue-500 t-block t-w-full md:t-min-w-112 t-p-3" autocomplete="new-password" aria-required="true" placeholder="Please enter your new password." />
        <ValidationMessage For="() => Input.NewPassword" class="text-danger" />
    </div>
    <div class="t-mt-2 t-mb-3">
        <label for="confirm-password" class="t-block t-mb-1 t-ml-1 t-text-base t-font-medium t-text-gray-600 dark:t-text-white">Confirm password</label>
        <InputText type="password" @bind-Value="Input.ConfirmPassword" class="t-bg-gray-50 t-border t-border-gray-300 t-text-gray-900 t-text-sm t-rounded-lg focus:t-ring-blue-500 focus:t-border-blue-500 t-block t-w-full md:t-min-w-112 t-p-3" autocomplete="new-password" aria-required="true" placeholder="Please confirm your new password." />
        <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
    </div>
    <button type="submit" class="t-text-white t-bg-gradient-to-br t-from-green-400 t-to-blue-600 hover:t-bg-gradient-to-bl focus:t-ring-4 focus:t-outline-none focus:t-ring-green-200 dark:focus:t-ring-green-800 t-font-medium t-rounded-lg t-text-sm t-px-5 t-w-full t-py-2.5 t-text-center me-2 t-mb-2">Update password</button>
</EditForm>

@code {
    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public bool IsUserAdmin { get; set; }

    [Parameter]
    public EventCallback OnClosed { get; set; }

    [SupplyParameterFromForm]
    private PasswordInput Input { get; set; } = new PasswordInput();

    private TutoringPlatformUser editUser;

    private TutoringPlatformUser userAdmin = default;

    private string? message;

    protected override async Task OnInitializedAsync()
    {
        editUser = await UserManager.FindByIdAsync(Id);
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userPrincipal = authState.User;
        var userId = UserManager.GetUserId(userPrincipal);
        userAdmin = await UserManager.FindByIdAsync(userId);
    }

    private async Task OnValidSubmitAsync()
    {
        message = null;
        IdentityResult changePasswordResult;

        if (!IsUserAdmin && string.IsNullOrEmpty(Input.OldPassword))
        {
            message = "The current password is required.";
            StateHasChanged(); // Update UI to show the message
            return;
        }

        if (IsUserAdmin && !await UserManager.CheckPasswordAsync(userAdmin, Input.AdminPassword))
        {
            message = "Error: Incorrect password.";
            return;
        }

        // If the user is not an admin, verify the old password
        if (!IsUserAdmin)
        {
            var oldPasswordCorrect = await UserManager.CheckPasswordAsync(editUser, Input.OldPassword);
            if (!oldPasswordCorrect)
            {
                message = "The old password is incorrect.";
                StateHasChanged(); // Update UI to show the message
                return;
            }
        }

        // Proceed with changing the password
        if (IsUserAdmin)
        {
            // Admin changing a user's password without the old password
            var token = await UserManager.GeneratePasswordResetTokenAsync(editUser);
            changePasswordResult = await UserManager.ResetPasswordAsync(editUser, token, Input.NewPassword);
        }
        else
        {
            // Non-admin user changing their own password
            changePasswordResult = await UserManager.ChangePasswordAsync(editUser, Input.OldPassword, Input.NewPassword);
        }

        if (!changePasswordResult.Succeeded)
        {
            message = "Failed to change the password.";
            // Log each error or append them to the message
            foreach (var error in changePasswordResult.Errors)
            {
                Logger.LogError($"Error changing password: {error.Description}");
            }
            StateHasChanged(); // Re-render to show the error message
            return;
        }

        Logger.LogInformation("User password changed successfully.");
        await OnClosed.InvokeAsync(null);
        ResetInputModel();
    }

    private void ResetInputModel()
    {
        Input = new PasswordInput(); // Reset to a new instance
        StateHasChanged(); // Notify Blazor to re-render the component
    }
}