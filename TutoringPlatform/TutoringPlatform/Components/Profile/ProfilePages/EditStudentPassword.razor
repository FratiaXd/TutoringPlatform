@using System.ComponentModel.DataAnnotations
@inject UserManager<TutoringPlatformUser> UserManager
@inject ILogger<EditStudentPassword> Logger
@inject SignInManager<TutoringPlatformUser> SignInManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="mt-3 bg-danger text-white bg-opacity-75">
    @message
</div>

<EditForm Model="Input" FormName="change-password" OnValidSubmit="OnValidSubmitAsync" method="post">
    <DataAnnotationsValidator />
    <ValidationSummary class="text-danger" role="alert" />
    @if (!IsUserAdmin)
    {
        <div class="form-floating mb-3">
            <InputText type="password" @bind-Value="Input.OldPassword" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Please enter your old password." />
            <label for="old-password" class="form-label">Old password</label>
            <ValidationMessage For="() => Input.OldPassword" class="text-danger" />
        </div>
    }
    else
    {
        <div class="form-floating mb-3">
            <InputText type="password" @bind-Value="Input.AdminPassword" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Please enter admin password." />
            <label for="old-password" class="form-label">Admin Password</label>
            <ValidationMessage For="() => Input.AdminPassword" class="text-danger" />
        </div>
    }
    <div class="form-floating mb-3">
        <InputText type="password" @bind-Value="Input.NewPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please enter your new password." />
        <label for="new-password" class="form-label">New password</label>
        <ValidationMessage For="() => Input.NewPassword" class="text-danger" />
    </div>
    <div class="form-floating mb-3">
        <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please confirm your new password." />
        <label for="confirm-password" class="form-label">Confirm password</label>
        <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
    </div>
    <button type="submit" class="w-100 btn btn-lg btn-primary">Update password</button>
</EditForm>

@code {
    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public bool IsUserAdmin { get; set; }

    [Parameter]
    public EventCallback OnClosed { get; set; }

    [SupplyParameterFromForm]
    private PasswordInput Input { get; set; } = new PasswordInput();

    private TutoringPlatformUser editUser;

    private TutoringPlatformUser userAdmin = default;

    private string? message;

    protected override async Task OnInitializedAsync()
    {
        editUser = await UserManager.FindByIdAsync(Id);
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userPrincipal = authState.User;
        var userId = UserManager.GetUserId(userPrincipal);
        userAdmin = await UserManager.FindByIdAsync(userId);
    }

    private async Task OnValidSubmitAsync()
    {
        message = null;
        IdentityResult changePasswordResult;

        if (!IsUserAdmin && string.IsNullOrEmpty(Input.OldPassword))
        {
            message = "The current password is required.";
            StateHasChanged(); // Update UI to show the message
            return;
        }

        if (IsUserAdmin && !await UserManager.CheckPasswordAsync(userAdmin, Input.AdminPassword))
        {
            message = "Error: Incorrect password.";
            return;
        }

        // If the user is not an admin, verify the old password
        if (!IsUserAdmin)
        {
            var oldPasswordCorrect = await UserManager.CheckPasswordAsync(editUser, Input.OldPassword);
            if (!oldPasswordCorrect)
            {
                message = "The old password is incorrect.";
                StateHasChanged(); // Update UI to show the message
                return;
            }
        }

        // Proceed with changing the password
        if (IsUserAdmin)
        {
            // Admin changing a user's password without the old password
            var token = await UserManager.GeneratePasswordResetTokenAsync(editUser);
            changePasswordResult = await UserManager.ResetPasswordAsync(editUser, token, Input.NewPassword);
        }
        else
        {
            // Non-admin user changing their own password
            changePasswordResult = await UserManager.ChangePasswordAsync(editUser, Input.OldPassword, Input.NewPassword);
        }

        if (!changePasswordResult.Succeeded)
        {
            message = "Failed to change the password.";
            // Log each error or append them to the message
            foreach (var error in changePasswordResult.Errors)
            {
                Logger.LogError($"Error changing password: {error.Description}");
            }
            StateHasChanged(); // Re-render to show the error message
            return;
        }

        Logger.LogInformation("User password changed successfully.");
        await OnClosed.InvokeAsync(null);
        ResetInputModel();
    }

    private void ResetInputModel()
    {
        Input = new PasswordInput(); // Reset to a new instance
        StateHasChanged(); // Notify Blazor to re-render the component
    }
}