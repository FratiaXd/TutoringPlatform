@using System.ComponentModel.DataAnnotations
@using TutoringPlatform.Components.Admin.AdminPages
@inject UserManager<TutoringPlatformUser> UserManager
@inject RoleManager<IdentityRole> RoleManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<EditForm Model="Input" FormName="editprofile" OnValidSubmit="OnValidSubmitAsync" method="post">
    <DataAnnotationsValidator />
    <ValidationSummary class="text-danger" role="alert" />
    <div class="form-floating mb-3">
        <InputText @bind-Value="Input.FirstName" class="form-control" placeholder="Please enter your first name." />
        <label for="first-name" class="form-label">First Name</label>
        <ValidationMessage For="() => Input.FirstName" class="text-danger" />
    </div>
    <div class="form-floating mb-3">
        <InputText @bind-Value="Input.LastName" class="form-control" placeholder="Please enter your last name." />
        <label for="last-name" class="form-label">Last Name</label>
        <ValidationMessage For="() => Input.LastName" class="text-danger" />
    </div>
    @if (IsUserAdmin)
    {
        <div class="mb-3">
            <Switch @bind-Value="Input.IsAdmin" Label="Admin" />
        </div>
    }
    <button type="submit" class="w-100 btn btn-lg btn-primary">Save</button>
</EditForm>

@code {
    [Parameter]
    public string Id { get; set; }

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [Parameter]
    public EventCallback OnClosed { get; set; }

    private TutoringPlatformUser editUser;

    private bool IsUserAdmin = false;

    private List<string> Roles { get; set; } = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        IsUserAdmin = user.IsInRole("Admin");

        if (!string.IsNullOrEmpty(Id))
        {
            editUser = await UserManager.FindByIdAsync(Id);
            Input.FirstName ??= editUser.FirstName;
            Input.LastName ??= editUser.LastName;
            var userRoles = await UserManager.GetRolesAsync(editUser);
            Input.IsAdmin = userRoles.Contains("Admin");
        }
        Roles = RoleManager.Roles.Select(r => r.Name).ToList();
        base.OnInitialized();
    }

    private async Task OnValidSubmitAsync()
    {
        editUser.FirstName = Input.FirstName;
        editUser.LastName = Input.LastName;

        var currentRoles = await UserManager.GetRolesAsync(editUser);
        bool isAdminCurrently = currentRoles.Contains("Admin");

        string targetRole = Input.IsAdmin ? "Admin" : "Student";
        string oppositeRole = Input.IsAdmin ? "Student" : "Admin";

        if ((Input.IsAdmin && !isAdminCurrently) || (!Input.IsAdmin && isAdminCurrently))
        {
            // Remove the user from their current role(s)
            await UserManager.RemoveFromRolesAsync(editUser, currentRoles);
            // Add the user to the target role
            await UserManager.AddToRoleAsync(editUser, targetRole);
            editUser.RoleName = targetRole;
        }
        var updateResult = await UserManager.UpdateAsync(editUser);
        if (updateResult.Succeeded)
        {
            await OnClosed.InvokeAsync(null);
        }
    }

    private sealed class InputModel
    {
        [Required, MaxLength(20), RegularExpression(@"^[a-zA-Z]+$")]
        public string? FirstName { get; set; }
        [Required, MaxLength(20), RegularExpression(@"^[a-zA-Z]+$")]
        public string? LastName { get; set; }
        public bool IsAdmin { get; set; }
    }
}