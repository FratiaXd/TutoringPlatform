<EditForm Model="Input" FormName="editprofile" OnValidSubmit="OnValidSubmitAsync" method="post">
    <DataAnnotationsValidator />
    <div class="t-mb-3">
        <label for="first-name" class="t-block t-mb-1 t-ml-1 t-text-base t-font-medium t-text-gray-600 dark:t-text-white">First Name</label>
        <InputText type="text" @bind-Value="Input.FirstName" class="t-bg-gray-50 t-border t-border-gray-300 t-text-gray-900 t-text-sm t-rounded-lg focus:t-ring-blue-500 focus:t-border-blue-500 t-block t-w-full md:t-min-w-112 t-p-3" placeholder="Please enter your first name." />
        <ValidationMessage For="() => Input.FirstName" class="text-danger" />
    </div>
    <div class="t-mt-2 t-mb-3">
        <label for="last-name" class="t-block t-mb-1 t-ml-1 t-text-base t-font-medium t-text-gray-600 dark:t-text-white">Last Name</label>
        <InputText type="text" @bind-Value="Input.LastName" class="t-bg-gray-50 t-border t-border-gray-300 t-text-gray-900 t-text-sm t-rounded-lg focus:t-ring-blue-500 focus:t-border-blue-500 t-block t-w-full md:t-min-w-112 t-w-full t-p-3" placeholder="Please enter your last name." />
        <ValidationMessage For="() => Input.LastName" class="text-danger" />
    </div>
    @if (IsUserAdmin)
    {
        <div class="t-mb-5 t-mt-2 t-flex t-flex-col">
            <label for="last-name" class="t-block t-mb-1 t-ml-1 t-text-base t-font-medium t-text-gray-600 dark:t-text-white">Role</label>
            <div class="t-flex t-flex-row t-ml-1">
                <Switch @bind-Value="Input.IsAdmin" />
                <label>Admin</label>
            </div>
        </div>
    }
    <button type="submit" class="t-text-white t-bg-gradient-to-br t-from-green-400 t-to-blue-600 hover:t-bg-gradient-to-bl focus:t-ring-4 focus:t-outline-none focus:t-ring-green-200 dark:focus:t-ring-green-800 t-font-medium t-rounded-lg t-text-sm t-px-5 t-w-full t-py-2.5 t-text-center me-2 t-mb-2">Save</button>
</EditForm>

@code {
    [Parameter]
    public string Id { get; set; }
    [Parameter]
    public bool IsUserAdmin { get; set; }

    [SupplyParameterFromForm]
    private DetailsInput Input { get; set; } = new DetailsInput();

    [Parameter]
    public EventCallback OnClosed { get; set; }

    private TutoringPlatformUser editUser;

    private List<string> Roles { get; set; } = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(Id))
        {
            editUser = await UserManager.FindByIdAsync(Id);
            Input.FirstName ??= editUser.FirstName;
            Input.LastName ??= editUser.LastName;
            var userRoles = await UserManager.GetRolesAsync(editUser);
            Input.IsAdmin = userRoles.Contains("Admin");
        }
        Roles = RoleManager.Roles.Select(r => r.Name).ToList();
        base.OnInitialized();
    }

    private async Task OnValidSubmitAsync()
    {
        editUser.FirstName = Input.FirstName;
        editUser.LastName = Input.LastName;

        var currentRoles = await UserManager.GetRolesAsync(editUser);
        bool isAdminCurrently = currentRoles.Contains("Admin");

        string targetRole = Input.IsAdmin ? "Admin" : "Student";
        string oppositeRole = Input.IsAdmin ? "Student" : "Admin";

        if ((Input.IsAdmin && !isAdminCurrently) || (!Input.IsAdmin && isAdminCurrently))
        {
            // Remove the user from their current role(s)
            await UserManager.RemoveFromRolesAsync(editUser, currentRoles);
            // Add the user to the target role
            await UserManager.AddToRoleAsync(editUser, targetRole);
            editUser.RoleName = targetRole;
        }
        var updateResult = await UserManager.UpdateAsync(editUser);
        if (updateResult.Succeeded)
        {
            await OnClosed.InvokeAsync(null);
        }
    }
}