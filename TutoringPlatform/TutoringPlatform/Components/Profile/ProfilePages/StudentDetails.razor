@page "/profile/profilepages"
@page "/admin/profilepages/{Id}"
@rendermode InteractiveServer
@attribute [Authorize]
<h3>Student Details</h3>

<p>Student id: @Id</p>
<p>Student First Name: @user?.FirstName</p>
<p>Student Last Name: @user?.LastName</p>
<p>Student Email: @user?.Email</p>
<p>Role: @user?.RoleName</p>

<Modal @ref="detailsModal" IsVerticallyCentered="true" />
<Modal @ref="emailModal" IsVerticallyCentered="true" />
<Modal @ref="passwordModal" IsVerticallyCentered="true" />
<Modal @ref="deleteModal" IsVerticallyCentered="true" />

<Button Color="ButtonColor.Primary" @onclick="ShowStudentDetails">Edit Details</Button>
<Button Color="ButtonColor.Primary" @onclick="ShowStudentEmail">Update Email</Button>
<Button Color="ButtonColor.Primary" @onclick="ShowStudentPassword">Change Password</Button>
<Button Color="ButtonColor.Danger" @onclick="ShowStudentDelete">Delete Account</Button>

@code {
    [Parameter]
    public string Id { get; set; }
    private Modal detailsModal = default!;
    private Modal emailModal = default!;
    private Modal passwordModal = default!;
    private Modal deleteModal = default!;
    private bool IsUserAdmin = false;
    private TutoringPlatformUser user;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userPrincipal = authState.User;
        IsUserAdmin = userPrincipal.IsInRole("Admin");

        // Determine if the current route is an admin route
        bool isAdminRoute = NavigationManager.Uri.Contains("/admin/profilepages/");

        // If it's an admin route and the user is not an admin, redirect them
        if (isAdminRoute && !IsUserAdmin)
        {
            NavigationManager.NavigateTo("/Account/AccessDenied", replace: true);
            return;
        }

        if (!string.IsNullOrEmpty(Id))
        {
            user = await UserManager.FindByIdAsync(Id);
        }
        else
        {
            if (userPrincipal.Identity?.IsAuthenticated ?? false)
            {
                var userId = UserManager.GetUserId(userPrincipal);
                user = await UserManager.FindByIdAsync(userId);
            }
        }
        if (user != null)
        {
            Id = user.Id;
        }
    }

    private async Task ShowStudentDetails()
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("Id", Id);
        parameters.Add("IsUserAdmin", IsUserAdmin);
        parameters.Add("OnClosed", EventCallback.Factory.Create(this, OnStudentDetailsUpdated));
        await detailsModal.ShowAsync<EditStudentDetails>(title: "Student details", parameters: parameters);
    }

    private async Task OnStudentDetailsUpdated()
    {
        // This method is called when the EditStudentDetails modal is closed
        // Update user details here
        if (!string.IsNullOrEmpty(Id))
        {
            await detailsModal.HideAsync();
            user = await UserManager.FindByIdAsync(Id);
            StateHasChanged(); // Make sure to refresh the UI after updating the user details
        }
    }

    private async Task ShowStudentEmail()
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("Id", Id);
        parameters.Add("IsUserAdmin", IsUserAdmin);
        parameters.Add("OnClosed", EventCallback.Factory.Create(this, OnStudentEmailUpdated));
        await emailModal.ShowAsync<EditStudentEmail>(title: "Update Email", parameters: parameters);
    }

    private async Task OnStudentEmailUpdated()
    {
        // This method is called when the OnStudentEmailUpdate modal is closed
        // Update user details here
        if (!string.IsNullOrEmpty(Id))
        {
            await emailModal.HideAsync();
            user = await UserManager.FindByIdAsync(Id);
            StateHasChanged(); // Make sure to refresh the UI after updating the user details
        }
    }

    private async Task ShowStudentPassword()
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("Id", Id);
        parameters.Add("IsUserAdmin", IsUserAdmin);
        parameters.Add("OnClosed", EventCallback.Factory.Create(this, OnStudentPasswordUpdated));
        await passwordModal.ShowAsync<EditStudentPassword>(title: "Change Password", parameters: parameters);
    }

    private async Task OnStudentPasswordUpdated()
    {
        // This method is called when the OnStudentPasswordUpdated modal is closed
        // Update user details here
        if (!string.IsNullOrEmpty(Id))
        {
            await passwordModal.HideAsync();
            user = await UserManager.FindByIdAsync(Id);
            StateHasChanged(); // Make sure to refresh the UI after updating the user details
        }
    }

    private async Task ShowStudentDelete()
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("Id", Id);
        parameters.Add("IsUserAdmin", IsUserAdmin);
        parameters.Add("OnClosed", EventCallback.Factory.Create(this, OnStudentDeleteUpdated));
        await deleteModal.ShowAsync<DeleteStudent>(title: "Delete Account", parameters: parameters);
    }

    private async Task OnStudentDeleteUpdated()
    {
        // This method is called when the OnStudentDeleteUpdated modal is closed
        // Update user details here
        if (!string.IsNullOrEmpty(Id))
        {
            await deleteModal.HideAsync();
            StateHasChanged(); // Make sure to refresh the UI after updating the user details
            NavigationManager.NavigateTo("/admin/adminpages/dashboard", replace: true);
        }
    }
}

