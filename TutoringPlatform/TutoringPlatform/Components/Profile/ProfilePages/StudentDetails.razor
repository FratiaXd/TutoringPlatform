@page "/profile/profilepages/info"
@page "/admin/profilepages/info/{Id}"
@rendermode InteractiveServer
@attribute [Authorize]

<div class="t-flex t-flex-col t-items-center">
    <h3 class="t-text-gray-600 t-text-center text-2xl t-font-bold t-leading-none t-tracking-tight md:t-text-3xl">Student Details</h3>


    <div class="t-mt-6 md:t-mt-10 t-w-full t-max-w-md t-bg-white t-border t-border-gray-200 t-rounded-lg t-shadow dark:t-bg-gray-800 dark:t-border-gray-700">
        <div class="t-flex t-flex-col t-items-center t-pb-10">
            <h5 class="t-mb-1 t-mt-10 t-text-xl t-font-medium t-text-gray-900 dark:t-text-white">@user?.FirstName @user?.LastName</h5>
            <span class="t-mb-1 t-text-sm t-text-gray-500 dark:t-text-gray-400">@user?.Email</span>
            <span class="t-text-sm t-text-gray-500 dark:t-text-gray-400">@user?.RoleName</span>
            <div class="t-flex t-flex-col t-mt-4 md:t-mt-6">
                <button type="button" @onclick="ShowStudentDetails" class="t-mb-2 t-text-white t-bg-gradient-to-br t-from-green-400 t-to-blue-600 hover:t-bg-gradient-to-bl focus:t-ring-4 focus:t-outline-none focus:t-ring-green-200 dark:focus:t-ring-green-800 t-font-medium t-rounded-lg t-text-sm t-px-8 t-py-2.5 t-text-center">Edit Details</button>
                <button type="button" @onclick="ShowStudentEmail" class="t-mb-2 t-text-white t-bg-gradient-to-br t-from-green-400 t-to-blue-600 hover:t-bg-gradient-to-bl focus:t-ring-4 focus:t-outline-none focus:t-ring-green-200 dark:focus:t-ring-green-800 t-font-medium t-rounded-lg t-text-sm t-px-8 t-py-2.5 t-text-center">Update Email</button>
                <button type="button" @onclick="ShowStudentPassword" class="t-mb-2 t-text-white t-bg-gradient-to-br t-from-green-400 t-to-blue-600 hover:t-bg-gradient-to-bl focus:t-ring-4 focus:t-outline-none focus:t-ring-green-200 dark:focus:t-ring-green-800 t-font-medium t-rounded-lg t-text-sm t-px-8 t-py-2.5 t-text-center">Change Password</button>
                <button type="button" @onclick="ShowStudentDelete" class="t-mb-2 t-mt-6 t-text-white t-bg-gradient-to-r t-from-red-400 t-via-red-500 t-to-red-600 hover:t-bg-gradient-to-br focus:t-ring-4 focus:t-outline-none focus:t-ring-red-300 dark:focus:t-ring-red-800 t-shadow-lg shadow-red-500/50 dark:t-shadow-lg dark:shadow-red-800/80 t-font-medium t-rounded-lg t-text-sm t-px-5 t-py-2.5 t-text-center">Delete Account</button>
            </div>
        </div>
    </div>

    <Modal @ref="detailsModal" IsVerticallyCentered="true" />
    <Modal @ref="emailModal" IsVerticallyCentered="true" />
    <Modal @ref="passwordModal" IsVerticallyCentered="true" />
    <Modal @ref="deleteModal" IsVerticallyCentered="true" />
</div>

@code {
    [Parameter]
    public string Id { get; set; }
    private Modal detailsModal = default!;
    private Modal emailModal = default!;
    private Modal passwordModal = default!;
    private Modal deleteModal = default!;
    private bool IsUserAdmin = false;
    private TutoringPlatformUser user;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userPrincipal = authState.User;
        IsUserAdmin = userPrincipal.IsInRole("Admin");

        // Determine if the current route is an admin route
        bool isAdminRoute = NavigationManager.Uri.Contains("/admin/profilepages/");

        // If it's an admin route and the user is not an admin, redirect them
        if (isAdminRoute && !IsUserAdmin)
        {
            NavigationManager.NavigateTo("/Account/AccessDenied", replace: true);
            return;
        }

        if (!string.IsNullOrEmpty(Id))
        {
            user = await UserManager.FindByIdAsync(Id);
        }
        else
        {
            if (userPrincipal.Identity?.IsAuthenticated ?? false)
            {
                var userId = UserManager.GetUserId(userPrincipal);
                user = await UserManager.FindByIdAsync(userId);
            }
        }
        if (user != null)
        {
            Id = user.Id;
        }
    }

    private async Task ShowStudentDetails()
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("Id", Id);
        parameters.Add("IsUserAdmin", IsUserAdmin);
        parameters.Add("OnClosed", EventCallback.Factory.Create(this, OnStudentDetailsUpdated));
        await detailsModal.ShowAsync<EditStudentDetails>(title: "Student details", parameters: parameters);
    }

    private async Task OnStudentDetailsUpdated()
    {
        // This method is called when the EditStudentDetails modal is closed
        // Update user details here
        if (!string.IsNullOrEmpty(Id))
        {
            await detailsModal.HideAsync();
            user = await UserManager.FindByIdAsync(Id);
            StateHasChanged(); // Make sure to refresh the UI after updating the user details
        }
    }

    private async Task ShowStudentEmail()
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("Id", Id);
        parameters.Add("IsUserAdmin", IsUserAdmin);
        parameters.Add("OnClosed", EventCallback.Factory.Create(this, OnStudentEmailUpdated));
        await emailModal.ShowAsync<EditStudentEmail>(title: "Update Email", parameters: parameters);
    }

    private async Task OnStudentEmailUpdated()
    {
        // This method is called when the OnStudentEmailUpdate modal is closed
        // Update user details here
        if (!string.IsNullOrEmpty(Id))
        {
            await emailModal.HideAsync();
            user = await UserManager.FindByIdAsync(Id);
            StateHasChanged(); // Make sure to refresh the UI after updating the user details
        }
    }

    private async Task ShowStudentPassword()
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("Id", Id);
        parameters.Add("IsUserAdmin", IsUserAdmin);
        parameters.Add("OnClosed", EventCallback.Factory.Create(this, OnStudentPasswordUpdated));
        await passwordModal.ShowAsync<EditStudentPassword>(title: "Change Password", parameters: parameters);
    }

    private async Task OnStudentPasswordUpdated()
    {
        // This method is called when the OnStudentPasswordUpdated modal is closed
        // Update user details here
        if (!string.IsNullOrEmpty(Id))
        {
            await passwordModal.HideAsync();
            user = await UserManager.FindByIdAsync(Id);
            StateHasChanged(); // Make sure to refresh the UI after updating the user details
        }
    }

    private async Task ShowStudentDelete()
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("Id", Id);
        parameters.Add("IsUserAdmin", IsUserAdmin);
        parameters.Add("OnClosed", EventCallback.Factory.Create(this, OnStudentDeleteUpdated));
        await deleteModal.ShowAsync<DeleteStudent>(title: "Delete Account", parameters: parameters);
    }

    private async Task OnStudentDeleteUpdated()
    {
        // This method is called when the OnStudentDeleteUpdated modal is closed
        // Update user details here
        if (!string.IsNullOrEmpty(Id))
        {
            await deleteModal.HideAsync();
            StateHasChanged(); // Make sure to refresh the UI after updating the user details
            NavigationManager.NavigateTo("/admin/adminpages/dashboard", replace: true);
        }
    }
}

