<div class="mt-3 bg-danger text-white bg-opacity-75">
    @message
</div>

<EditForm Model="Input" FormName="delete-user" OnValidSubmit="OnValidSubmitAsync" method="post">
    <DataAnnotationsValidator />
    <ValidationSummary class="text-danger" role="alert" />
    @if (!IsUserAdmin)
    {
        <div class="form-floating mb-3">
            <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Please enter your password." />
            <label for="password" class="form-label">Password</label>
            <ValidationMessage For="() => Input.Password" class="text-danger" />
        </div>
    } 
    else
    {
        <div class="form-floating mb-3">
            <InputText type="password" @bind-Value="Input.AdminPassword" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Please enter admin password." />
            <label for="password" class="form-label">Admin Password</label>
            <ValidationMessage For="() => Input.AdminPassword" class="text-danger" />
        </div>
    }
    <button class="w-100 btn btn-lg btn-danger" type="submit">Delete data and close account</button>
</EditForm>

@code {
    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public bool IsUserAdmin { get; set; }

    [Parameter]
    public EventCallback OnClosed { get; set; }

    [SupplyParameterFromForm]
    private AdminInput Input { get; set; } = new AdminInput();

    private TutoringPlatformUser user = default!;
    public string? message;
    private TutoringPlatformUser userAdmin = default;

    protected override async Task OnInitializedAsync()
    {
        Input ??= new();
        user = await UserManager.FindByIdAsync(Id);
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userPrincipal = authState.User;
        var userId = UserManager.GetUserId(userPrincipal);
        userAdmin = await UserManager.FindByIdAsync(userId);
    }

    private async Task OnValidSubmitAsync()
    {
        if (!IsUserAdmin && !await UserManager.CheckPasswordAsync(user, Input.Password))
        {
            message = "Error: Incorrect password.";
            return;
        }

        if (IsUserAdmin && !await UserManager.CheckPasswordAsync(userAdmin, Input.AdminPassword))
        {
            message = "Error: Incorrect password.";
            return;
        }

        var result = await UserManager.DeleteAsync(user);
        if (!result.Succeeded)
        {
            throw new InvalidOperationException("Unexpected error occurred deleting user.");
        }

        if (!IsUserAdmin)
        {
            RedirectManager.RedirectToSignOut();
        }
        else
        {
            await OnClosed.InvokeAsync(null);
        }

        var userId = await UserManager.GetUserIdAsync(user);
        Logger.LogInformation("User with ID '{UserId}' deleted.", userId);
    }
}
