@implements IDisposable
@using Microsoft.AspNetCore.Identity
@using TutoringPlatform.Data
@using TutoringPlatform.Shared.Models
@inject NavigationManager NavigationManager
@inject SignInManager<TutoringPlatformUser> SignInManager

<ul class="nav nav-pills flex-column">
    <li class="nav-item">
        <NavLink class="nav-link" href="@GetProfileLink()" Match="NavLinkMatch.All">Profile</NavLink>
    </li>
    <li class="nav-item">
        <NavLink class="nav-link" href="@GetCoursesLink()">Courses</NavLink>
    </li>
    <li class="nav-item">
        <NavLink class="nav-link" href="@GetPurchasesLink()">Purchase History</NavLink>
    </li>
</ul>

@code {
    private string? selectedUserId;

    private void DetermineContextAndUserId()
    {
        selectedUserId = null; // Reset at the beginning

        if (IsAdminViewingAnotherUserProfile())
        {
            var uri = new Uri(NavigationManager.Uri);
            var segments = uri.Segments;
            // Assuming the ID is the last segment following "/admin/profilepages/studentdetails/"
            if (segments.Length > 0 && segments[^1] != "studentdetails/")
            {
                selectedUserId = segments[^1].TrimEnd('/');
            }
        }
    }

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += HandleLocationChanged;
        DetermineContextAndUserId();
    }

    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        DetermineContextAndUserId();
        StateHasChanged(); // Re-render the component with the updated links
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }

    private bool IsAdminViewingAnotherUserProfile()
    {
        // This method checks if the current URL belongs to the admin viewing route
        // Adjust the condition based on your actual admin route
        return NavigationManager.Uri.Contains("/admin/profilepages/", StringComparison.OrdinalIgnoreCase);
    }

    private string GetProfileLink()
    {
        // Generate the link based on whether an admin is viewing another user's profile
        return IsAdminViewingAnotherUserProfile() ? $"Admin/ProfilePages/{selectedUserId}" : "Profile/ProfilePages";
    }

    private string GetCoursesLink()
    {
        return IsAdminViewingAnotherUserProfile() ? $"Admin/ProfilePages/ProfileCourses/{selectedUserId}" : "Profile/ProfilePages/ProfileCourses";
    }

    private string GetPurchasesLink()
    {
        return IsAdminViewingAnotherUserProfile() ? $"Admin/ProfilePages/purchasehistory/{selectedUserId}" : "Profile/ProfilePages/purchasehistory";
    }
}