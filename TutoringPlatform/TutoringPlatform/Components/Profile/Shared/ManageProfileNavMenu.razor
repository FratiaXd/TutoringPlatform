@implements IDisposable
@using Microsoft.AspNetCore.Identity
@using TutoringPlatform.Data
@using TutoringPlatform.Shared.Models
@inject NavigationManager NavigationManager
@inject SignInManager<TutoringPlatformUser> SignInManager



<ul class="t-mt-3">
    <li class="t-mb-3">
        <a href="@GetProfileLink()" class="@GetNavLinkClass("info")" aria-current="page">
            <svg class="@GetSvgClass("info")" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                <path d="M10 0a10 10 0 1 0 10 10A10.011 10.011 0 0 0 10 0Zm0 5a3 3 0 1 1 0 6 3 3 0 0 1 0-6Zm0 13a8.949 8.949 0 0 1-4.951-1.488A3.987 3.987 0 0 1 9 13h2a3.987 3.987 0 0 1 3.951 3.512A8.949 8.949 0 0 1 10 18Z" />
            </svg>
            Profile
        </a>
    </li>
    <li class="t-mb-3">
        <a href="@GetCoursesLink()" class="@GetNavLinkClass("ProfileCourses")">
            <svg class="@GetSvgClass("ProfileCourses")" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 18 18"><path d="M6.143 0H1.857A1.857 1.857 0 0 0 0 1.857v4.286C0 7.169.831 8 1.857 8h4.286A1.857 1.857 0 0 0 8 6.143V1.857A1.857 1.857 0 0 0 6.143 0Zm10 0h-4.286A1.857 1.857 0 0 0 10 1.857v4.286C10 7.169 10.831 8 11.857 8h4.286A1.857 1.857 0 0 0 18 6.143V1.857A1.857 1.857 0 0 0 16.143 0Zm-10 10H1.857A1.857 1.857 0 0 0 0 11.857v4.286C0 17.169.831 18 1.857 18h4.286A1.857 1.857 0 0 0 8 16.143v-4.286A1.857 1.857 0 0 0 6.143 10Zm10 0h-4.286A1.857 1.857 0 0 0 10 11.857v4.286c0 1.026.831 1.857 1.857 1.857h4.286A1.857 1.857 0 0 0 18 16.143v-4.286A1.857 1.857 0 0 0 16.143 10Z" /></svg>
            Courses
        </a>
    </li>
    <li class="t-mb-3">
        <a href="@GetPurchasesLink()" class="@GetNavLinkClass("purchasehistory")">
            <svg xmlns="http://www.w3.org/2000/svg" class="@GetSvgClass("purchasehistory")" aria-hidden="true" fill="currentColor" viewBox="0 0 576 512">
                <path d="M64 32C28.7 32 0 60.7 0 96v32H576V96c0-35.3-28.7-64-64-64H64zM576 224H0V416c0 35.3 28.7 64 64 64H512c35.3 0 64-28.7 64-64V224zM112 352h64c8.8 0 16 7.2 16 16s-7.2 16-16 16H112c-8.8 0-16-7.2-16-16s7.2-16 16-16zm112 16c0-8.8 7.2-16 16-16H368c8.8 0 16 7.2 16 16s-7.2 16-16 16H240c-8.8 0-16-7.2-16-16z" />
            </svg>
            History
        </a>
    </li>
</ul>

@code {
    private string? selectedUserId;
    private string? currentUrl;
    private void DetermineContextAndUserId()
    {
        selectedUserId = null; // Reset at the beginning

        if (IsAdminViewingAnotherUserProfile())
        {
            var uri = new Uri(NavigationManager.Uri);
            var segments = uri.Segments;
            // Assuming the ID is the last segment following "/admin/profilepages/studentdetails/"
            if (segments.Length > 0 && segments[^1] != "studentdetails/")
            {
                selectedUserId = segments[^1].TrimEnd('/');
            }
        }
    }

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += HandleLocationChanged;
        DetermineContextAndUserId();
    }

    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        DetermineContextAndUserId();
        StateHasChanged(); // Re-render the component with the updated links
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }

    private bool IsAdminViewingAnotherUserProfile()
    {
        // This method checks if the current URL belongs to the admin viewing route
        // Adjust the condition based on your actual admin route
        return NavigationManager.Uri.Contains("/admin/profilepages/", StringComparison.OrdinalIgnoreCase);
    }

    private string GetProfileLink()
    {
        // Generate the link based on whether an admin is viewing another user's profile
        return IsAdminViewingAnotherUserProfile() ? $"Admin/ProfilePages/info/{selectedUserId}" : "Profile/ProfilePages/info";
    }

    private string GetCoursesLink()
    {
        return IsAdminViewingAnotherUserProfile() ? $"Admin/ProfilePages/ProfileCourses/{selectedUserId}" : "Profile/ProfilePages/ProfileCourses";
    }

    private string GetPurchasesLink()
    {
        return IsAdminViewingAnotherUserProfile() ? $"Admin/ProfilePages/purchasehistory/{selectedUserId}" : "Profile/ProfilePages/purchasehistory";
    }

    private string GetNavLinkClass(string href)
    {
        return currentUrl.Contains(href, StringComparison.OrdinalIgnoreCase) ?
        "t-inline-flex t-items-center t-pl-4 t-pr-32 t-py-3 t-text-white t-bg-blue-700 hover:t-text-white t-rounded-lg active t-w-full dark:t-bg-blue-600" :
        "t-inline-flex t-items-center t-pl-4 t-pr-32 t-py-3 t-rounded-lg hover:t-text-gray-900 t-bg-gray-50 hover:t-bg-gray-100 t-w-full dark:t-bg-gray-800 dark:hover:t-bg-gray-700 dark:hover:t-text-white";
    }

    private string GetSvgClass(string href)
    {
        return currentUrl.Contains(href, StringComparison.OrdinalIgnoreCase) ?
        "t-w-4 t-h-4 me-2 t-text-white" :
        "t-w-4 t-h-4 me-2 t-text-gray-500 dark:t-text-gray-400";
    }
}