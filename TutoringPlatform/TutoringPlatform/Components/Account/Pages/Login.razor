@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using TutoringPlatform.Data

@inject SignInManager<TutoringPlatformUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<h2 class="t-mt-8 t-text-4xl t-font-bold dark:t-text-black text-center">Log in</h2>

<div>
    <section>
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <p class="t-mt-4 t-mb-4 t-text-lg t-font-normal t-text-gray-500 dark:t-text-gray-400 text-center">Use a local account to log in.</p>
                <hr />
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="t-flex t-justify-center t-items-center t-p-4 t-mt-4 t-text-sm t-text-red-800 t-border t-border-red-300 t-rounded-lg t-bg-red-50" role="alert">
                        <svg class="t-flex-shrink-0 t-inline t-w-4 t-h-4 me-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                            <path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5ZM9.5 4a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3ZM12 15H8a1 1 0 0 1 0-2h1v-3H8a1 1 0 0 1 0-2h2a1 1 0 0 1 1 1v4h1a1 1 0 0 1 0 2Z" />
                        </svg>
                        <span class="t-sr-only">Info</span>
                        <div>
                            <span class="t-font-medium">@errorMessage</span> Change a few things up and try submitting again.
                        </div>
                    </div>
                }
                <div class="t-flex t-justify-center">
                <div class="t-mt-4 t-mb-3">
                    <label for="email" class="t-block t-mb-2 t-text-sm t-font-medium t-text-gray-900 dark:t-text-white">Email</label>
                    <InputText type="email" @bind-Value="Input.Email" class="t-bg-gray-50 t-border t-border-gray-300 t-text-gray-900 t-text-sm t-rounded-lg focus:t-ring-blue-500 focus:t-border-blue-500 t-block t-w-full t-min-w-112 t-p-3" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <ValidationMessage For="() => Input.Email" class="text-red-500" />
                </div>
                </div>
                <div class="t-flex t-justify-center">
                <div class="t-mb-3">
                <label for="password" class="t-block t-mb-2 t-text-sm t-font-medium t-text-gray-900 dark:t-text-white">Password</label>
                    <InputText class="t-bg-gray-50 t-border t-border-gray-300 t-text-gray-900 t-text-sm t-rounded-lg focus:t-ring-blue-500 focus:t-border-blue-500 t-block t-w-full t-min-w-112 t-p-3" type="password" @bind-Value="Input.Password" autocomplete="current-password" aria-required="true" placeholder="•••••••••" />
                <ValidationMessage For="() => Input.Password" class="text-red-500" />
                </div>
                </div>
                <div class="t-flex t-justify-center">
                <div class="t-mt-4 t-flex t-justify-center">
                    <button type="submit" class="t-text-white t-bg-blue-700 hover:t-bg-blue-800 focus:t-ring-4 focus:t-outline-none focus:t-ring-blue-300 t-font-medium t-rounded-lg t-text-sm t-w-64 t-px-5 t-py-2.5 t-text-center">Submit</button>
                </div>
                </div>
                <div class="t-mt-5 t-flex t-flex-col t-items-center t-justify-center">
                    <p class="t-mb-1 t-text-md t-font-normal t-text-gray-500">
                        <a href="Account/ForgotPassword">Forgot your password?</a>
                    </p>
                    <p class="t-mb-1 t-text-md t-font-normal t-text-gray-500">
                        <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a>
                    </p>
                    <p class="t-mb-1 t-text-md t-font-normal t-text-gray-500">
                        <a href="Account/ResendEmailConfirmation">Resend email confirmation</a>
                    </p>
                </div>
            </EditForm>
    </section>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
