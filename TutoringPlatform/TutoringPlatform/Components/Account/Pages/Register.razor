@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using TutoringPlatform.Data

@inject UserManager<TutoringPlatformUser> UserManager
@inject IUserStore<TutoringPlatformUser> UserStore
@inject SignInManager<TutoringPlatformUser> SignInManager
@inject IEmailSender<TutoringPlatformUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<h2 class="t-mt-8 t-text-4xl t-font-bold dark:t-text-black text-center">Sign up</h2>

<div>
    <div>
        <StatusMessage Message="@Message" />
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator />
            <p class="t-mt-4 t-mb-4 t-text-lg t-font-normal t-text-gray-500 dark:t-text-gray-400 text-center">Create a new account.</p>
            <hr />
            <div class="t-flex t-justify-center">
                <div class="t-mt-4 t-mb-3">
                    <label for="email" class="t-block t-mb-2 t-text-sm t-font-medium t-text-gray-900 dark:t-text-white">Email</label>
                    <InputText type="email" @bind-Value="Input.Email" class="t-bg-gray-50 t-border t-border-gray-300 t-text-gray-900 t-text-sm t-rounded-lg focus:t-ring-blue-500 focus:t-border-blue-500 t-block t-w-full t-min-w-112 t-p-3" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
            </div>
            <div class="t-flex t-justify-center">
                <div class="t-mb-3">
                    <label for="password" class="t-block t-mb-2 t-text-sm t-font-medium t-text-gray-900 dark:t-text-white">Password</label>
                    <InputText type="password" @bind-Value="Input.Password" class="t-bg-gray-50 t-border t-border-gray-300 t-text-gray-900 t-text-sm t-rounded-lg focus:t-ring-blue-500 focus:t-border-blue-500 t-block t-w-full t-min-w-112 t-p-3" autocomplete="new-password" aria-required="true" placeholder="•••••••••" />
                    <ValidationMessage For="() => Input.Password" class="text-red-500" />
                </div>
            </div>
            <div class="t-flex t-justify-center">
                <div class="t-mb-3">
                    <label for="confirm-password" class="t-block t-mb-2 t-text-sm t-font-medium t-text-gray-900 dark:t-text-white">Confirm Password</label>
                    <InputText type="password" @bind-Value="Input.ConfirmPassword" class="t-bg-gray-50 t-border t-border-gray-300 t-text-gray-900 t-text-sm t-rounded-lg focus:t-ring-blue-500 focus:t-border-blue-500 t-block t-w-full t-min-w-112 t-p-3" autocomplete="new-password" aria-required="true" placeholder="•••••••••" />
                    <ValidationMessage For="() => Input.ConfirmPassword" class="text-red-500" />
                </div>
            </div>
            <div class="t-flex t-justify-center">
                <div class="t-mb-3">
                    <label for="first-name" class="t-block t-mb-2 t-text-sm t-font-medium t-text-gray-900 dark:t-text-white">First Name</label>
                    <InputText type="text" @bind-Value="Input.FirstName" class="t-bg-gray-50 t-border t-border-gray-300 t-text-gray-900 t-text-sm t-rounded-lg focus:t-ring-blue-500 focus:t-border-blue-500 t-block t-w-full t-min-w-112 t-p-3" autocomplete="first-name" aria-required="true" placeholder="first name" />
                    <ValidationMessage For="() => Input.FirstName" class="text-danger" />
                </div>
            </div>
            <div class="t-flex t-justify-center">
                <div class="t-mb-3">
                    <label for="last-name" class="t-block t-mb-2 t-text-sm t-font-medium t-text-gray-900 dark:t-text-white">Last Name</label>
                    <InputText type="text" @bind-Value="Input.LastName" class="t-bg-gray-50 t-border t-border-gray-300 t-text-gray-900 t-text-sm t-rounded-lg focus:t-ring-blue-500 focus:t-border-blue-500 t-block t-w-full t-min-w-112 t-p-3" autocomplete="last-name" aria-required="true" placeholder="last name" />
                    <ValidationMessage For="() => Input.LastName" class="text-danger" />
                </div>
            </div>
            <div class="t-flex t-justify-center">
                <div class="t-mt-4 t-flex t-justify-center">
                    <button type="submit" class="t-text-white t-bg-blue-700 hover:t-bg-blue-800 focus:t-ring-4 focus:t-outline-none focus:t-ring-blue-300 t-font-medium t-rounded-lg t-text-sm t-w-64 t-px-5 t-py-2.5 t-text-center">Register</button>
                </div>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        user.FirstName = Input.FirstName;
        user.LastName = Input.LastName;

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        AssignRolesToUserModel(user);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        await AssignRolesToUser(user);

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private async Task AssignRolesToUser(TutoringPlatformUser user)
    {
        // Check if user's email contains a specific domain, and assign roles accordingly
        if (user.Email.EndsWith("@admin.com", StringComparison.OrdinalIgnoreCase))
        {
            await UserManager.AddToRoleAsync(user, "Admin");
        }
        else if (user.Email.EndsWith("@gmail.com", StringComparison.OrdinalIgnoreCase))
        {
            await UserManager.AddToRoleAsync(user, "Student");
        }
    }

    private TutoringPlatformUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<TutoringPlatformUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(TutoringPlatformUser)}'. " +
                $"Ensure that '{nameof(TutoringPlatformUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<TutoringPlatformUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<TutoringPlatformUser>)UserStore;
    }

    private void AssignRolesToUserModel(TutoringPlatformUser user)
    {
        if (user.Email.EndsWith("@admin.com", StringComparison.OrdinalIgnoreCase))
        {
            user.RoleName = "Admin";
        }
        else if (user.Email.EndsWith("@gmail.com", StringComparison.OrdinalIgnoreCase))
        {
            user.RoleName = "Student";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Required]
        [Display(Name = "First Name")]
        public string FirstName { get; set; } = "";

        [Required]
        [Display(Name = "Last Name")]
        public string LastName { get; set; } = "";
    }
}
