@layout ManageCourseBuilderLayout
@rendermode InteractiveServer
@page "/admin/adminpages/coursebuilder/quizdetailbuilder/{QuizId:int}"

<div class="t-border t-border-gray-100 t-rounded-lg">
    <div class="t-py-4 t-px-8">
        <h3 class="t-text-center t-mt-3 t-mb-3 t-text-gray-600 t-mx-4 md:t-mx-20 t-text-2xl t-font-bold t-leading-none t-tracking-tight md:t-text-4xl">Edit Quiz Details</h3>
        <hr class="t-h-1 t-mx-4 md:t-mx-20 t-my-4 t-bg-gray-800 t-border-4 t-rounded md:t-my-2">
        @if (!string.IsNullOrEmpty(message))
        {
            if (message.Contains("success"))
            {
                <div class="t-flex t-justify-center t-items-center t-p-4 t-mt-4 t-text-sm t-text-green-800 t-border t-border-green-300 t-rounded-lg t-bg-green-50" role="alert">
                    <svg class="t-flex-shrink-0 t-inline t-w-4 t-h-4 me-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5ZM9.5 4a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3ZM12 15H8a1 1 0 0 1 0-2h1v-3H8a1 1 0 0 1 0-2h2a1 1 0 0 1 1 1v4h1a1 1 0 0 1 0 2Z" />
                    </svg>
                    <span class="t-sr-only">Info</span>
                    <div>
                        <span class="t-font-medium">@message</span>
                    </div>
                </div>
            }
            else
            {
                <div class="t-flex t-justify-center t-items-center t-p-4 t-mt-4 t-text-sm t-text-red-800 t-border t-border-red-300 t-rounded-lg t-bg-red-50" role="alert">
                    <svg class="t-flex-shrink-0 t-inline t-w-4 t-h-4 me-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5ZM9.5 4a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3ZM12 15H8a1 1 0 0 1 0-2h1v-3H8a1 1 0 0 1 0-2h2a1 1 0 0 1 1 1v4h1a1 1 0 0 1 0 2Z" />
                    </svg>
                    <span class="t-sr-only">Info</span>
                    <div>
                        <span class="t-font-medium">@message</span>
                    </div>
                </div>
            }
        }

        <div class="t-mt-8 t-flex t-flex-row t-justify-center t-gap-4">
            <button @onclick="AddQuestion" type="button" class="t-text-white t-mx-auto t-bg-gradient-to-r t-from-green-400 t-via-green-500 t-to-green-600 hover:t-bg-gradient-to-br focus:t-ring-4 focus:t-outline-none focus:t-ring-green-300 dark:focus:t-ring-green-800 t-font-medium t-rounded-lg t-text-sm t-w-64 t-px-5 t-py-2.5">+ Add Question</button>
            <button @onclick="ShowDelete" type="button" class="t-text-white t-mx-auto t-bg-gradient-to-r t-from-red-400 t-via-red-500 t-to-red-600 hover:t-bg-gradient-to-br focus:t-ring-4 focus:t-outline-none focus:t-ring-red-300 dark:focus:t-ring-red-800 t-shadow-lg shadow-red-500/50 dark:t-shadow-lg dark:shadow-red-800/80 t-font-medium t-rounded-lg t-text-sm t-w-64 t-px-5 t-py-2.5">Delete Quiz</button>
        </div>

        <Modal @ref="deleteModal" IsVerticallyCentered="true" />
        <Modal @ref="editModal" IsVerticallyCentered="true" />

        <div class="t-mt-8 t-mx-3">
            <EditForm Model="Input" FormName="editquiz" OnValidSubmit="UpdateQuizName" method="post">
                <DataAnnotationsValidator />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.QuizName" class="form-control" placeholder="Quiz title." />
                    <label for="title" class="form-label">Quiz Title</label>
                    <ValidationMessage For="() => Input.QuizName" class="text-danger" />
                </div>
                <div class="t-mx-4 md:t-mx-10 t-mt-4 md:t-mt-8 t-mb-8 t-flex t-justify-center">
                    <button type="submit" class="t-text-white t-mx-auto t-bg-gradient-to-br t-from-green-400 t-to-blue-600 hover:t-bg-gradient-to-bl focus:t-ring-4 focus:t-outline-none focus:t-ring-green-200 t-font-medium t-rounded-lg t-text-sm t-w-64 t-px-5 t-py-2.5">Save</button>
                </div>
            </EditForm>

            @if (questions != null)
            {
                <h3 class="t-text-center t-mt-3 t-mb-3 t-text-gray-600 t-mx-4 md:t-mx-20 t-text-xl t-font-bold t-leading-none t-tracking-tight md:t-text-2xl">Quiz Questions</h3>
                <hr class="t-h-1 t-mx-4 md:t-mx-20 t-my-4 t-bg-gray-800 t-border-4 t-rounded md:t-my-2">
                @foreach (var question in questions)
                {
                    <div class="t-flex t-mt-6 t-mb-6 t-justify-center">
                        <div class="t-w-full t-max-w-md t-p-4 t-bg-gray-50 t-border t-border-gray-200 t-rounded-lg t-shadow sm:t-p-8 dark:t-bg-gray-800 dark:t-border-gray-700">
                            <div class="t-flex t-items-center t-justify-between t-mb-4">
                                <h5 class="t-text-xl t-font-bold t-leading-none t-text-gray-900 dark:t-text-white">@question.Question</h5>
                            </div>
                            <div class="t-flow-root">
                                <ul role="list" class="t-divide-y t-divide-gray-200 dark:t-divide-gray-700">
                                    @if (question.QuizOptions != null)
                                    {
                                        @foreach (var option in question.QuizOptions)
                                        {
                                            <li class="t-py-3 sm:t-py-4">
                                                <div class="t-flex t-items-center t-justify-between">
                                                    <div class="t-flex-1 t-min-w-0 ms-4">
                                                        <p class="t-text-sm t-font-medium t-text-gray-900 t-truncate dark:t-text-white">
                                                            @option.Option
                                                        </p>
                                                        @if (option.IsCorrect)
                                                        {
                                                            <p class="t-text-sm t-inline-flex t-items-center t-text-green-600 t-truncate dark:t-text-gray-400">
                                                                <svg class="t-w-3.5 t-h-3.5 me-1.5" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 512 512">
                                                                    <path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM369 209L241 337c-9.4 9.4-24.6 9.4-33.9 0l-64-64c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l47 47L335 175c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9z" />
                                                                </svg>
                                                                Correct
                                                            </p>
                                                        }
                                                        else
                                                        {
                                                            <p class="t-text-sm t-inline-flex t-items-center t-text-gray-500 t-truncate dark:t-text-gray-400">
                                                                <svg class="t-w-3.5 t-h-3.5 me-1.5" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 512 512">
                                                                    <path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM175 175c9.4-9.4 24.6-9.4 33.9 0l47 47 47-47c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9l-47 47 47 47c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0l-47-47-47 47c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l47-47-47-47c-9.4-9.4-9.4-24.6 0-33.9z" />
                                                                </svg>
                                                                Incorrect
                                                            </p>
                                                        }
                                                    </div>
                                                    <div class="t-inline-flex t-items-center t-text-base t-font-semibold t-text-gray-900 dark:t-text-white">
                                                        <button @onclick="() => DeleteOption(question, option)" type="button" class="t-text-white t-bg-gradient-to-r t-from-red-400 t-via-red-500 t-to-red-600 hover:t-bg-gradient-to-br focus:t-ring-4 focus:t-outline-none focus:t-ring-red-300 dark:focus:t-ring-red-800 t-shadow-lg shadow-red-500/50 dark:t-shadow-lg dark:shadow-red-800/80 t-font-medium t-rounded-lg t-text-sm t-px-3 t-py-2">
                                                            <svg xmlns="http://www.w3.org/2000/svg" class="t-w-3.5 t-h-3.5" fill="currentColor" viewBox="0 0 448 512">
                                                                <path d="M135.2 17.7L128 32H32C14.3 32 0 46.3 0 64S14.3 96 32 96H416c17.7 0 32-14.3 32-32s-14.3-32-32-32H320l-7.2-14.3C307.4 6.8 296.3 0 284.2 0H163.8c-12.1 0-23.2 6.8-28.6 17.7zM416 128H32L53.2 467c1.6 25.3 22.6 45 47.9 45H346.9c25.3 0 46.3-19.7 47.9-45L416 128z" />
                                                            </svg>
                                                        </button>
                                                    </div>
                                                </div>
                                            </li>
                                        }
                                    }
                                </ul>
                            </div>
                            <div class="t-flex t-flex-row t-justify-between t-mt-4 t-mx-3">
                                <button type="button" @onclick="() => AddOption(question)" class="t-text-white t-bg-gradient-to-r t-from-green-400 t-via-green-500 t-to-green-600 hover:t-bg-gradient-to-br focus:t-ring-4 focus:t-outline-none focus:t-ring-green-300 dark:focus:t-ring-green-800 t-font-medium t-rounded-lg t-text-sm t-px-3 t-py-2">+ Add</button>
                                <button type="button" @onclick="() => EditClicked(question)" class="t-text-white t-bg-gradient-to-br t-from-green-400 t-to-blue-600 hover:t-bg-gradient-to-bl focus:t-ring-4 focus:t-outline-none focus:t-ring-green-200 t-font-medium t-rounded-lg t-text-sm t-px-5 t-py-2">Edit</button>
                                <button type="button" @onclick="() => DeleteQuestion(question)" class="t-text-white t-bg-gradient-to-r t-from-red-400 t-via-red-500 t-to-red-600 hover:t-bg-gradient-to-br focus:t-ring-4 focus:t-outline-none focus:t-ring-red-300 dark:focus:t-ring-red-800 t-shadow-lg shadow-red-500/50 dark:t-shadow-lg dark:shadow-red-800/80 t-font-medium t-rounded-lg t-text-sm t-px-3 t-py-2">Delete</button>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int? QuizId { get; set; }

    private Modal deleteModal = default!;

    private Modal editModal = default!;

    private Quiz quiz;

    List<QuizQuestion>? questions;

    private string? message;

    private QuizModel Input { get; set; } = new ();

    protected override async Task OnInitializedAsync()
    {
        quiz = await QuizService.GetQuizWithQandOAsync(QuizId.Value);
        questions = new List<QuizQuestion>();
        questions.AddRange(quiz.QuizQuestions);
        Input.QuizName = quiz.QuizName;
    }

    private async Task AddQuestion()
    {
        var question = new QuizQuestion
        {
            Question = "Draft",
            QuizId = QuizId.Value
        };
        var addedQuestion = await QuizService.AddQuizQuestionAsync(question);
        if (addedQuestion != null)
        {
            questions.Add(addedQuestion);
            BuilderState.AddQuizQuestion(addedQuestion);
        }
    }

    private async Task AddOption(QuizQuestion question)
    {
        var option = new QuizOption
        {
            Option = "Draft Option",
            IsCorrect = false,
            QuizQuestionId = question.QuizQuestionId
        };
        var addedOption = await QuizService.AddQuizOptionAsync(option);
        if (addedOption != null)
        {
            question.QuizOptions.Add(addedOption);

        }
    }

    private async Task ShowDelete()
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("RecordId", QuizId);
        parameters.Add("RecordType", "Quiz");
        await deleteModal.ShowAsync<AdminDelete>(title: "Delete Quiz", parameters: parameters);
    }

    private async Task UpdateQuizName()
    {
        quiz.QuizName = Input.QuizName;
        var updateResult = await QuizService.UpdateQuizAsync(quiz);
        if (updateResult == null)
        {
            message = "Unexpected error when updating quiz.";
        }
        else
        {
            BuilderState.UpdateQuiz(quiz);
            message = "Quiz updated successfully";
        }
    }

    private async void EditClicked(QuizQuestion question)
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("QuestionToEdit", question);
        parameters.Add("OnClosed", EventCallback.Factory.Create(this, OnQuizQuestionUpdated));
        await editModal.ShowAsync<EditQuestion>(title: "Edit Question", parameters: parameters);
    }

    private async Task OnQuizQuestionUpdated()
    {
        await editModal.HideAsync();
        StateHasChanged();
    }

    public async Task DeleteQuestion(QuizQuestion question)
    {
        var deleteResult = await QuizService.DeleteQuizQuestionAsync(question);
        if (deleteResult != null)
        {
            var questionToDelete = questions.FirstOrDefault(q => q.QuizQuestionId == deleteResult.QuizQuestionId);
            questions.Remove(questionToDelete);
            StateHasChanged();
        }
    }

    public async Task DeleteOption(QuizQuestion question, QuizOption option)
    {
        var deleteResult = await QuizService.DeleteQuizOptionAsync(option);
        if (deleteResult != null)
        {
            var optionToDelete = question.QuizOptions.FirstOrDefault(o => o.QuizOptionId == deleteResult.QuizOptionId);
            question.QuizOptions.Remove(optionToDelete);
            StateHasChanged();
        }
    }

    private sealed class QuizModel
    {
        [Required, MaxLength(30)]
        public string? QuizName { get; set; }
    }
}
