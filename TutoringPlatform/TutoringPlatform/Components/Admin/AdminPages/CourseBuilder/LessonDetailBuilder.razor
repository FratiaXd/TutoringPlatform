@layout ManageCourseBuilderLayout
@inject ILessonService LessonService
@inject BuilderStateService BuilderState
@rendermode InteractiveServer
@page "/admin/adminpages/coursebuilder/lessondetailbuilder/{LessonId:int}"

<h3>Lesson Detail Builder</h3>

<h4>@message</h4>

<EditForm Model="Input" FormName="editlesson" OnValidSubmit="UpdateLesson" method="post">
    <DataAnnotationsValidator />
    <ValidationSummary class="text-danger" role="alert" />
    <div class="form-floating mb-3">
        <InputText @bind-Value="Input.LessonTitle" class="form-control" placeholder="Please enter lesson title." />
        <label for="title" class="form-label">Lesson Title</label>
        <ValidationMessage For="() => Input.LessonTitle" class="text-danger" />
    </div>
    <div class="form-floating mb-3">
        <InputText @bind-Value="Input.LessonDescription" class="form-control" placeholder="Please enter lesson description." />
        <label for="description" class="form-label">Lesson Description</label>
        <ValidationMessage For="() => Input.LessonDescription" class="text-danger" />
    </div>
    <div class="form-floating mb-3">
        <InputText @bind-Value="Input.LessonVideoUrl" class="form-control" placeholder="Please add course video." />
        <label for="video-url" class="form-label">Lesson Video</label>
        <ValidationMessage For="() => Input.LessonVideoUrl" class="text-danger" />
    </div>
    <div class="form-floating mb-3">
        <InputText @bind-Value="Input.LessonImageUrl" class="form-control" placeholder="Please add course image." />
        <label for="image-url" class="form-label">Lesson Image</label>
        <ValidationMessage For="() => Input.LessonImageUrl" class="text-danger" />
    </div>
    <div class="form-floating mb-3">
        <InputText @bind-Value="Input.LessonContent" class="form-control" placeholder="Please add course video." />
        <label for="content" class="form-label">Lesson Content</label>
        <ValidationMessage For="() => Input.LessonContent" class="text-danger" />
    </div>
    <div class="mb-3">
        <Switch @bind-Value="Input.IsAutograded" Label="Autograded" />
    </div>
    <div class="mb-3">
        <Switch @bind-Value="Input.IsAssessed" Label="Assessed" />
    </div>
    <button type="submit" class="w-100 btn btn-lg btn-primary">Save</button>
</EditForm>

<Button Color="ButtonColor.Danger">Delete Lesson</Button>

@code {
    [Parameter]
    public int? LessonId { get; set; }

    public Lesson updatedLesson;

    public string? message;

    private LessonInput Input { get; set; } = new LessonInput();

    protected override async Task OnInitializedAsync()
    {
        updatedLesson = await LessonService.GetLessonByIdAsync(LessonId.Value);
        Input.LessonTitle = updatedLesson.LessonTitle;
        Input.LessonDescription = updatedLesson.LessonDescription;
        Input.LessonVideoUrl = updatedLesson.LessonVideoUrl;
        Input.LessonImageUrl = updatedLesson.LessonImageUrl;
        Input.LessonContent = updatedLesson.LessonContent;
        Input.IsAutograded = updatedLesson.IsAutograded;
        Input.IsAssessed = updatedLesson.IsAssessed;

        //Update lesson in BuilderStateService
        //BuilderState.UpdateLessonTitle(LessonId.Value, updatedLesson.LessonTitle);
    }

    private async Task UpdateLesson()
    {
        if (await LessonService.IsTitleUsedAsync(LessonId.Value, Input.LessonTitle))
        {
            message = "The lesson with this title already exists.";
            return;
        }
        updatedLesson.LessonTitle = Input.LessonTitle;
        updatedLesson.LessonDescription = Input.LessonDescription;
        updatedLesson.LessonVideoUrl = Input.LessonVideoUrl;
        updatedLesson.LessonImageUrl = Input.LessonImageUrl;
        updatedLesson.LessonContent = Input.LessonContent;
        updatedLesson.IsAutograded = Input.IsAutograded;
        updatedLesson.IsAssessed = Input.IsAssessed;

        var updateResult = await LessonService.UpdateLessonAsync(updatedLesson);
        if (updateResult == null)
        {
            message = "Unexpected error when adding course.";
        }
        else
        {
            BuilderState.UpdateLessonTitle(LessonId.Value, updatedLesson.LessonTitle);
            message = "Lesson updated successfully";
        }
    }
}
