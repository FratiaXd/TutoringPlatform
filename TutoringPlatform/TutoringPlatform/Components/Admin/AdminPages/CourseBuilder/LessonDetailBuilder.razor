@layout ManageCourseBuilderLayout
@rendermode InteractiveServer
@page "/admin/adminpages/coursebuilder/lessondetailbuilder/{LessonId:int}"

<h3>Lesson Builder</h3>

<h4>@message</h4>

<Modal @ref="deleteModal" IsVerticallyCentered="true" />

<EditForm Model="Input" FormName="editlesson" OnValidSubmit="UpdateLesson" method="post">
    <DataAnnotationsValidator />
    <ValidationSummary class="text-danger" role="alert" />
    <div class="form-floating mb-3">
        <InputNumber @bind-Value="Input.LessonOrder" class="form-control" placeholder="Lesson order." readonly/>
        <label for="order" class="form-label">Lesson Order Number</label>
        <ValidationMessage For="() => Input.LessonOrder" class="text-danger" />
    </div>
    <div class="form-floating mb-3">
        <InputText @bind-Value="Input.LessonTitle" class="form-control" placeholder="Please enter lesson title." />
        <label for="title" class="form-label">Lesson Title</label>
        <ValidationMessage For="() => Input.LessonTitle" class="text-danger" />
    </div>
    <div class="form-floating mb-3">
        <InputText @bind-Value="Input.LessonDescription" class="form-control" placeholder="Please enter lesson description." />
        <label for="description" class="form-label">Lesson Description</label>
        <ValidationMessage For="() => Input.LessonDescription" class="text-danger" />
    </div>
    <div class="row">
        <div class="col-md-11">
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.LessonVideoUrl" class="form-control" placeholder="Please add course video." />
                <label for="video-url" class="form-label">Lesson Video</label>
                <ValidationMessage For="() => Input.LessonVideoUrl" class="text-danger" />
            </div>
        </div>
        <div class="col-md-1">
            <Button Color="ButtonColor.Primary" @onclick="SearchVideo">Search</Button>
        </div>
    </div>
    @if (lessonVideo != null)
    {
        <div class="card mt-3">
            <div class="row no-gutters">
                <div class="col-md-4">
                    <img class="card-img" style="max-width: 200px;" src="@lessonVideo.thumbnail" alt="Video Thumbnail">
                </div>
                <div class="col-md-8">
                    <div class="card-body">
                        <h5 class="card-title">Video Details</h5>
                        <p class="card-text">Video Title: @lessonVideo.title</p>
                        <p class="card-text">Published At: @lessonVideo.publishedAt</p>
                    </div>
                </div>
            </div>
        </div>
        <br/>
    }
    <div class="form-floating mb-3">
        <InputText @bind-Value="Input.LessonImageUrl" class="form-control" placeholder="Please add course image." />
        <label for="image-url" class="form-label">Lesson Image</label>
        <ValidationMessage For="() => Input.LessonImageUrl" class="text-danger" />
    </div>
    <div class="form-floating mb-3">
        <InputText @bind-Value="Input.LessonContent" class="form-control" placeholder="Please add course video." />
        <label for="content" class="form-label">Lesson Content</label>
        <ValidationMessage For="() => Input.LessonContent" class="text-danger" />
    </div>
    <div class="mb-3">
        <Switch @bind-Value="Input.IsAutograded" Label="Make Quiz Visible" Disabled="@(!QuizExists)" />
    </div>
    <div class="mb-3">
        <Switch @bind-Value="Input.IsAssessed" Label="Make Assignment Visible" Disabled="@(!AssignmentExists)" />
    </div>
    <button type="submit" class="w-100 btn btn-lg btn-primary">Save</button>
</EditForm>

<Button Color="ButtonColor.Success" @onclick="AddQuiz" Disabled="@QuizExists">Add Quiz</Button>
<Button Color="ButtonColor.Success" @onclick="AddAssignment" Disabled="@AssignmentExists">Add Assignment</Button>

<Button Color="ButtonColor.Danger" @onclick="ShowDelete">Delete Lesson</Button>

@code {
    [Parameter]
    public int? LessonId { get; set; }

    public Lesson updatedLesson;

    public string? message;

    private bool QuizExists;

    private bool AssignmentExists;

    private LessonInput Input { get; set; } = new LessonInput();

    private Modal deleteModal = default!;

    public VideoDetails? lessonVideo { get; set; }

    protected override async Task OnInitializedAsync()
    {
        updatedLesson = await LessonService.GetLessonByIdAsync(LessonId.Value);
        Input.LessonTitle = updatedLesson.LessonTitle;
        Input.LessonDescription = updatedLesson.LessonDescription;
        Input.LessonVideoUrl = updatedLesson.LessonVideoUrl;
        Input.LessonImageUrl = updatedLesson.LessonImageUrl;
        Input.LessonContent = updatedLesson.LessonContent;
        Input.IsAutograded = updatedLesson.IsAutograded;
        Input.IsAssessed = updatedLesson.IsAssessed;
        Input.LessonOrder = updatedLesson.LessonOrder;
        
        if (updatedLesson.LessonVideoUrl is not null)
        {
            SearchVideo();
        }

        QuizExists = IsQuizCreated();
        AssignmentExists = IsAssignmentCreated();
    }
    //TODO NEED TO ADD CHECK FOR CHANGING THE VIDEO
    private async Task UpdateLesson()
    {
        if (await LessonService.IsTitleUsedAsync(LessonId.Value, Input.LessonTitle))
        {
            message = "The lesson with this title already exists.";
            return;
        }
        if (lessonVideo is null)
        {
            message = "Please search your video first";
            return;
        }
        updatedLesson.LessonTitle = Input.LessonTitle;
        updatedLesson.LessonDescription = Input.LessonDescription;
        updatedLesson.LessonVideoUrl = Input.LessonVideoUrl;
        updatedLesson.LessonImageUrl = Input.LessonImageUrl;
        updatedLesson.LessonContent = Input.LessonContent;
        updatedLesson.IsAutograded = Input.IsAutograded;
        updatedLesson.IsAssessed = Input.IsAssessed;

        if (updatedLesson.Quiz != null)
        {
            var checkQuiz = await QuizService.AllQuizQuestionsHaveOptionsAsync(updatedLesson.Quiz.QuizId);
            if (!checkQuiz && updatedLesson.IsAutograded)
            {
                message = "Quiz missing options.";
                Input.IsAutograded = false;
                return;
            }

            var checkOptions = await QuizService.AllQuizQuestionsHaveCorrectAnswerAsync(updatedLesson.Quiz.QuizId);
            if (!checkOptions && updatedLesson.IsAutograded)
            {
                message = "Quiz Questions missing correct options.";
                Input.IsAutograded = false;
                return;
            }
        }

        var updateResult = await LessonService.UpdateLessonAsync(updatedLesson);
        if (updateResult == null)
        {
            message = "Unexpected error when updating lesson.";
        }
        else
        {
            BuilderState.UpdateLesson(LessonId.Value, updatedLesson);
            message = "Lesson updated successfully";
        }
    }

    private async Task SearchVideo()
    {
        lessonVideo = null;
        var videoId = GetYouTubeVideoId(Input.LessonVideoUrl);
        var videoInfo = await YouTubeService.GetVideoByIdAsync(videoId);
        if (videoInfo is null)
        {
            message = "Video not found. Check the link.";
        }
        else
        {
            message = string.Empty;
            lessonVideo = videoInfo;
            StateHasChanged();
        }
    }

    public string GetYouTubeVideoId(string youtubeUrl)
    {
        // Check if the URL is valid
        if (Uri.TryCreate(youtubeUrl, UriKind.Absolute, out Uri uriResult) &&
            (uriResult.Scheme == Uri.UriSchemeHttp || uriResult.Scheme == Uri.UriSchemeHttps))
        {
            // Split the URL by '?' and '&', then find the parameter with key 'v'
            string[] queryParams = uriResult.Query.TrimStart('?').Split('&');
            foreach (string param in queryParams)
            {
                string[] keyValue = param.Split('=');
                if (keyValue.Length == 2 && keyValue[0] == "v")
                {
                    // Return the value of the 'v' parameter (YouTube video ID)
                    string videoId = keyValue[1];

                    // If there's additional text after the video ID (e.g., &t=312s), remove it
                    int index = videoId.IndexOf('&');
                    if (index != -1)
                    {
                        videoId = videoId.Substring(0, index);
                    }

                    return videoId;
                }
            }
        }

        // If no 'v' parameter found or URL is invalid, return null
        return null;
    }

    private async Task ShowDelete()
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("RecordId", LessonId);
        parameters.Add("RecordType", "Lesson");
        await deleteModal.ShowAsync<AdminDelete>(title: "Delete Lesson", parameters: parameters);       
    }

    private async Task AddQuiz()
    {
        var addQuiz = new Quiz
        {
            QuizName = "Quiz",
            LessonId = LessonId.Value
        };
        var addedQuiz = await QuizService.AddQuizAsync(addQuiz);
        if (addedQuiz != null)
        {
            updatedLesson.Quiz = addedQuiz;
            QuizExists = true;
            BuilderState.UpdateLesson(updatedLesson.LessonId, updatedLesson);
        }
    }

    private async Task AddAssignment()
    {
        var addAssignment = new Assignment
        {
            TaskName = "Assignment",
            TaskDescription = "Enter description",
            LessonId = LessonId.Value
        };
        var addedAssignment = await AssignmentService.AddAssignmentAsync(addAssignment);
        if (addedAssignment != null)
        {
            updatedLesson.Assignment = addedAssignment;
            AssignmentExists = true;
            BuilderState.UpdateLesson(updatedLesson.LessonId, updatedLesson);
        }
    }

    private bool IsQuizCreated()
    {
        if (updatedLesson.Quiz != null)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    private bool IsAssignmentCreated()
    {
        if (updatedLesson.Assignment != null)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}
