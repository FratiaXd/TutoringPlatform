@if (!string.IsNullOrEmpty(message))
{
    <div class="t-flex t-justify-center t-items-center t-p-4 t-mb-3 t-text-sm t-text-red-800 t-border t-border-red-300 t-rounded-lg t-bg-red-50" role="alert">
        <svg class="t-flex-shrink-0 t-inline t-w-4 t-h-4 me-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
            <path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5ZM9.5 4a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3ZM12 15H8a1 1 0 0 1 0-2h1v-3H8a1 1 0 0 1 0-2h2a1 1 0 0 1 1 1v4h1a1 1 0 0 1 0 2Z" />
        </svg>
        <span class="t-sr-only">Info</span>
        <div>
            <span class="t-font-medium">@message</span> Change a few things up and try submitting again.
        </div>
    </div>
}

<EditForm Model="Input" FormName="delete-record" OnValidSubmit="OnDeleteRecord" method="post">
    <DataAnnotationsValidator />
    <div class="t-mb-3">
        <label for="password" class="t-block t-mb-1 t-ml-1 t-text-base t-font-medium t-text-gray-600 dark:t-text-white">Admin Password</label>
        <InputText type="password" @bind-Value="Input.AdminPassword" class="t-bg-gray-50 t-border t-border-gray-300 t-text-gray-900 t-text-sm t-rounded-lg focus:t-ring-blue-500 focus:t-border-blue-500 t-block t-w-full md:t-min-w-112 t-p-3" autocomplete="current-password" aria-required="true" placeholder="Please enter admin password." />
        <ValidationMessage For="() => Input.AdminPassword" class="text-danger" />
    </div>
    <button class="@buttonColor" type="submit">@buttonText</button>
</EditForm>

@code {
    private string? buttonText;
    private string? message = string.Empty;
    private TutoringPlatformUser userAdmin = default;
    private AdminInput Input { get; set; } = new AdminInput();
    private string? buttonColor;

    [Parameter]
    public int RecordId { get; set; }

    [Parameter]
    public string RecordType { get; set; }

    [Parameter]
    public Modal ModalRef { get; set; }

    [Parameter]
    public string? ImageUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (RecordType == "CoursePublish")
        {
            buttonText = "Publish Course";
            buttonColor = "t-text-white t-bg-gradient-to-br t-from-green-400 t-to-blue-600 hover:t-bg-gradient-to-bl focus:t-ring-4 focus:t-outline-none focus:t-ring-green-200 dark:focus:t-ring-green-800 t-font-medium t-rounded-lg t-text-sm t-px-5 t-w-full t-py-2.5 t-text-center me-2 t-mb-2";
        }
        else if (RecordType == "CourseUnpublish")
        {
            buttonText = "Unpublish Course";
            buttonColor = "t-text-white t-bg-gradient-to-r t-from-red-400 t-via-red-500 t-to-red-600 hover:t-bg-gradient-to-br focus:t-ring-4 focus:t-outline-none focus:t-ring-red-300 dark:focus:t-ring-red-800 t-shadow-lg shadow-red-500/50 dark:t-shadow-lg dark:shadow-red-800/80 t-font-medium t-rounded-lg t-text-sm t-px-5 t-w-full t-py-2.5 t-text-center me-2 t-mb-2";
        }
        else
        {
            buttonText = "Delete " + RecordType;
            buttonColor = "t-text-white t-bg-gradient-to-r t-from-red-400 t-via-red-500 t-to-red-600 hover:t-bg-gradient-to-br focus:t-ring-4 focus:t-outline-none focus:t-ring-red-300 dark:focus:t-ring-red-800 t-shadow-lg shadow-red-500/50 dark:t-shadow-lg dark:shadow-red-800/80 t-font-medium t-rounded-lg t-text-sm t-px-5 t-w-full t-py-2.5 t-text-center me-2 t-mb-2";
        }
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userPrincipal = authState.User;
        var userId = UserManager.GetUserId(userPrincipal);
        userAdmin = await UserManager.FindByIdAsync(userId);
    }

    private async Task OnDeleteRecord()
    {
        var result = await UserManager.CheckPasswordAsync(userAdmin, Input.AdminPassword);
        if (!result)
        {
            message = "Incorrect admin password. Please try again.";
        }
        else
        {
            message = string.Empty;
            if (RecordType == "Course")
            {
                await BlobRepositoryService.DeleteBlobsByCourseIdAsync(RecordId.ToString());
                var deleted = await CourseService.DeleteCourseAsync(RecordId);
                RedirectManager.RedirectToCourseManager();
            }
            else if (RecordType == "Lesson")
            {
                if (ImageUrl != null) await BlobRepositoryService.DeleteBlobFileAsync(ImageUrl);
                var deleted = await LessonService.DeleteLessonAsync(RecordId);
                //Need to automatically close the modal and point to coursedetail
                BuilderState.DeleteLesson(RecordId);
                await CourseService.UpdateCourseDurationAsync(deleted.CourseId, false);
                //NavigationManager.NavigateTo($"/admin/adminpages/coursebuilder/{BuilderState.CourseId}");
            }
            else if (RecordType == "Quiz")
            {
                var deleted = await QuizService.DeleteQuizAsync(RecordId);
                //Need to automatically close the modal and point to lessondetail
                BuilderState.DeleteQuiz(RecordId);
                //RedirectManager.RedirectToCourseManager();
            }
            else if (RecordType == "Assignment")
            {
                var deleted = await AssignmentService.DeleteAssignmentAsync(RecordId);
                //Need to automatically close the modal and point to lessondetail
                BuilderState.DeleteAssignment(RecordId);
                //RedirectManager.RedirectToCourseManager();
            }
            else if (RecordType == "CoursePublish")
            {
                var published = await CourseService.PublishCourseAsync(RecordId);
                RedirectManager.RedirectToCourseManager();
            }
            else if (RecordType == "CourseUnpublish")
            {
                var unpublished = await CourseService.UnpublishCourseAsync(RecordId);
                RedirectManager.RedirectToCourseManager();
            }
        }
    }
}
