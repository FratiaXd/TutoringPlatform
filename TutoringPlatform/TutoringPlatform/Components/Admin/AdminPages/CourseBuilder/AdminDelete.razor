@using System.ComponentModel.DataAnnotations
@using TutoringPlatform.Components.Account
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<TutoringPlatformUser> UserManager
@inject ICourseService CourseService
@inject ILessonService LessonService
@inject IdentityRedirectManager RedirectManager
@inject BuilderStateService BuilderState
@inject NavigationManager NavigationManager
@inject IQuizService QuizService
@inject IAssignmentService AssignmentService

<div class="mt-3 bg-danger text-white bg-opacity-75">
    @message
</div>

<EditForm Model="Input" FormName="delete-record" OnValidSubmit="OnDeleteRecord" method="post">
    <DataAnnotationsValidator />
    <ValidationSummary class="text-danger" role="alert" />
    <div class="form-floating mb-3">
        <InputText type="password" @bind-Value="Input.AdminPassword" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Please enter admin password." />
        <label for="password" class="form-label">Admin Password</label>
        <ValidationMessage For="() => Input.AdminPassword" class="text-danger" />
    </div>
    <button class="w-100 btn btn-lg btn-danger" type="submit">@buttonText</button>
</EditForm>

@code {
    private string? buttonText;
    private string? message = string.Empty;
    private TutoringPlatformUser userAdmin = default;
    private AdminInput Input { get; set; } = new AdminInput();

    [Parameter]
    public int RecordId { get; set; }

    [Parameter]
    public string RecordType { get; set; }

    [Parameter]
    public Modal ModalRef { get; set; }

    protected override async Task OnInitializedAsync()
    {
        buttonText = "Delete " + RecordType; 
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userPrincipal = authState.User;
        var userId = UserManager.GetUserId(userPrincipal);
        userAdmin = await UserManager.FindByIdAsync(userId);
    }

    private async Task OnDeleteRecord()
    {
        var result = await UserManager.CheckPasswordAsync(userAdmin, Input.AdminPassword);
        if (!result)
        {
            message = "Incorrect admin password. Please try again.";
        }
        else
        {
            message = string.Empty;
            if (RecordType == "Course")
            {
                var deleted = await CourseService.DeleteCourseAsync(RecordId);
                RedirectManager.RedirectToCourseManager();
            }
            else if (RecordType == "Lesson")
            {
                var deleted = await LessonService.DeleteLessonAsync(RecordId);
                //Need to automatically close the modal and point to coursedetail
                BuilderState.DeleteLesson(RecordId);
                //NavigationManager.NavigateTo($"/admin/adminpages/coursebuilder/{BuilderState.CourseId}");
            }
            else if (RecordType == "Quiz")
            {
                var deleted = await QuizService.DeleteQuizAsync(RecordId);
                //Need to automatically close the modal and point to lessondetail
                BuilderState.DeleteQuiz(RecordId);
                //RedirectManager.RedirectToCourseManager();
            }
            else if (RecordType == "Assignment")
            {
                var deleted = await AssignmentService.DeleteAssignmentAsync(RecordId);
                //Need to automatically close the modal and point to lessondetail
                BuilderState.DeleteAssignment(RecordId);
                //RedirectManager.RedirectToCourseManager();
            }
        }
    }
}
