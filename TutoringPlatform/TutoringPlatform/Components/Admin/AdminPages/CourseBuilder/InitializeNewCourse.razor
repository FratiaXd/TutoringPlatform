@page "/admin/adminpages/initializenewcourse"
@rendermode InteractiveServer
<h3>Enter New Course Details</h3>

<br />
<h4>@message</h4>

<EditForm Model="Input" FormName="createcourse" OnValidSubmit="CreateCourse" method="post">
    <DataAnnotationsValidator />
    <ValidationSummary class="text-danger" role="alert" />
    <div class="form-floating mb-3">
        <InputText @bind-Value="Input.Title" class="form-control" placeholder="Please enter course title." />
        <label for="title" class="form-label">Course Title</label>
        <ValidationMessage For="() => Input.Title" class="text-danger" />
    </div>
    <div class="form-floating mb-3">
        <InputSelect @bind-Value="Input.AccessLevel" class="form-select" @bind-Value:after="OnAccessLevelChanged">
            <option value="" selected disabled>Select option</option>
            @foreach (var level in Enum.GetValues<AccessLevel>())
            {
                <option value="@level.ToString()">@level.ToString()</option>
            }
        </InputSelect>
        <label for="access-level" class="form-label">Course Access Level</label>
    </div>
    <div class="form-floating mb-3">
        <InputNumber @bind-Value="Input.Price" class="form-control" placeholder="Please enter course price." readonly="@IsPriceReadOnly()" />
        <label for="price" class="form-label">Course Price</label>
        <ValidationMessage For="() => Input.Price" class="text-danger" />
    </div>
    <div class="form-floating mb-3">
        <InputText @bind-Value="Input.Description" class="form-control" placeholder="Please enter course description." />
        <label for="description" class="form-label">Course Description</label>
        <ValidationMessage For="() => Input.Description" class="text-danger" />
    </div>
    <div class="form-floating mb-3">
        <InputFile OnChange="HandleFileSelected" />
    </div>
    @if (!string.IsNullOrWhiteSpace(newCourse?.ImageUrl))
    {
        <br />
        <p>Image: </p>
        <img style="max-width: 400px;" src="@newCourse.ImageUrl" alt="Course Image" />
        <br />
    }
    <button type="submit" class="w-100 btn btn-lg btn-primary">Save</button>
</EditForm>

@code {
    private string? message;

    private CourseInput Input { get; set; } = new CourseInput();

    private IBrowserFile selectedFile;

    const long maxFileSize = 2 * 1024 * 1024;

    private Course newCourse;

    private async Task CreateCourse()
    {
        newCourse = new Course
            {
                Title = Input.Title,
                Price = Input.Price,
                Description = Input.Description,
                AccessLevel = Input.AccessLevel.ToString(),
                Duration = 0,
                IsActive = false,
                Status = "Draft initialized"
            };

        await UploadBlobFile();

        var updateResult = await CourseService.AddCourseAsync(newCourse);
        if (updateResult == null)
        {
            message = "Unexpected error. Please try again.";
            return;
        } 
        else
        {
            message = string.Empty;
            BuilderState.CourseId = newCourse.CourseId;
            BuilderState.IsActive = false;
            NavigationManager.NavigateTo($"/admin/adminpages/coursebuilder/{newCourse.CourseId}");
        }
    }

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File; // If expecting single file. For multiple files, use e.GetMultipleFiles()
    }

    private async Task UploadBlobFile()
    {
        if (selectedFile is null)
        {
            return;
        }
        if (selectedFile.Size > maxFileSize)
        {
            message = "File is too big. Maximum allowed size 2 MB.";
            return;
        }
        var uniqueId = Guid.NewGuid().ToString();
        var originalExtension = Path.GetExtension(selectedFile.Name);
        var fileName = $"course{newCourse.CourseId}img{uniqueId}{originalExtension}";
        using (var stream = selectedFile.OpenReadStream())
        {
            var fileUrl = await BlobRepositoryService.UploadBlobFileAsync(fileName, stream);
            newCourse.ImageUrl = fileUrl;
        }
    }

    private bool IsPriceReadOnly() => Input.AccessLevel == "Free" || Input.AccessLevel == "Restricted";

    private void OnAccessLevelChanged()
    {
        if (IsPriceReadOnly())
        {
            Input.Price = 0;

        }
    }
}
