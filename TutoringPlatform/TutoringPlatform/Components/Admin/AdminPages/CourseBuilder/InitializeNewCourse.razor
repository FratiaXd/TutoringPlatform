@page "/admin/adminpages/initializenewcourse"
@rendermode InteractiveServer


<div class="t-flex t-flex-col text-center t-mt-8">
    <h3 class="t-text-prim t-text-2xl t-font-bold t-leading-none t-tracking-tight md:t-text-4xl">Enter New Course Details</h3>
    <p class="t-mb-4 t-mt-1 t-text-lg t-font-normal t-text-gray-500 dark:t-text-gray-400">
        Set up primary course details. You can change it later.
    </p>
    <hr class="t-h-1 t-mx-4 md:t-mx-20 t-my-4 t-bg-gray-800 t-border-4 t-rounded md:t-my-2">
</div>
@if (!string.IsNullOrEmpty(message))
{
    <div class="t-flex t-justify-center t-items-center t-p-4 t-mb-3 t-mt-3 t-text-sm t-text-red-800 t-border t-border-red-300 t-rounded-lg t-bg-red-50" role="alert">
        <svg class="t-flex-shrink-0 t-inline t-w-4 t-h-4 me-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
            <path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5ZM9.5 4a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3ZM12 15H8a1 1 0 0 1 0-2h1v-3H8a1 1 0 0 1 0-2h2a1 1 0 0 1 1 1v4h1a1 1 0 0 1 0 2Z" />
        </svg>
        <span class="t-sr-only">Info</span>
        <div>
            <span class="t-font-medium">@message</span> Change a few things up and try submitting again.
        </div>
    </div>
}

<div class="t-flex t-flex-col t-items-center t-p-6 t-mb-8 t-bg-gray-50 text-medium t-text-gray-500 t-rounded-lg t-w-full">
    <EditForm Model="Input" FormName="createcourse" OnValidSubmit="CreateCourse" method="post">
        <DataAnnotationsValidator />
        <div class="form-floating mb-3">
            <InputText @bind-Value="Input.Title" class="form-control" placeholder="Please enter course title." />
            <label for="title" class="form-label">Course Title</label>
            <ValidationMessage For="() => Input.Title" class="text-danger" />
        </div>
        <div class="form-floating mb-3">
            <InputSelect @bind-Value="Input.AccessLevel" class="form-select" @bind-Value:after="OnAccessLevelChanged">
                <option value="" selected disabled>Select option</option>
                @foreach (var level in Enum.GetValues<AccessLevel>())
                {
                    <option value="@level.ToString()">@level.ToString()</option>
                }
            </InputSelect>
            <label for="access-level" class="form-label">Course Access Level</label>
        </div>
        <div class="form-floating mb-3">
            <InputNumber @bind-Value="Input.Price" class="form-control" placeholder="Please enter course price." readonly="@IsPriceReadOnly()" />
            <label for="price" class="form-label">Course Price</label>
            <ValidationMessage For="() => Input.Price" class="text-danger" />
        </div>
        <div class="form-floating mb-3">
            <InputTextArea @bind-Value="Input.Description" class="form-control" placeholder="Please enter course description." />
            <label for="description" class="form-label">Course Description</label>
            <ValidationMessage For="() => Input.Description" class="text-danger" />
        </div>
        <div class="form-floating mb-3">
            <InputFile OnChange="HandleFileSelected" class="t-block t-w-full t-text-sm t-text-gray-900 t-border t-border-gray-300 t-rounded-lg t-cursor-pointer t-bg-gray-50 dark:t-text-gray-400 focus:t-outline-none dark:t-bg-gray-700 dark:t-border-gray-600 dark:t-placeholder-gray-400" />
        </div>
        @if (!string.IsNullOrWhiteSpace(newCourse?.ImageUrl))
        {
            <br />
            <p>Image: </p>
            <img style="max-width: 400px;" src="@newCourse.ImageUrl" alt="Course Image" />
            <br />
        }
        <div class="t-mx-4 md:t-mx-10 t-mt-4 md:t-mt-8 t-mb-8 t-flex t-justify-center">
            <button type="submit" class="t-mx-auto t-text-prim t-bg-sec focus:t-ring-4 focus:t-ring-yellow-200 hover:t-text-prim hover:t-bg-lyel t-font-medium t-rounded-lg t-text-sm t-w-64 t-px-5 t-py-2.5">Save</button>
        </div>
    </EditForm>
</div>

@code {
    private string? message;

    private CourseInput Input { get; set; } = new CourseInput();

    private IBrowserFile selectedFile;

    const long maxFileSize = 2 * 1024 * 1024;

    private Course newCourse;

    private async Task CreateCourse()
    {
        newCourse = new Course
            {
                Title = Input.Title,
                Price = Input.Price,
                Description = Input.Description,
                AccessLevel = Input.AccessLevel.ToString(),
                Duration = 0,
                IsActive = false,
                Status = "Draft initialized"
            };

        var updateResult = await CourseService.AddCourseAsync(newCourse);

        if (updateResult == null)
        {
            message = "Unexpected error. Please try again.";
            return;
        }

        await UploadBlobFile();

        var uploadImg = await CourseService.UpdateCourseAsync(newCourse);

        if (uploadImg == null)
        {
            message = "Unexpected error. Please try again.";
            return;
        } 
        else
        {
            message = string.Empty;
            BuilderState.CourseId = newCourse.CourseId;
            BuilderState.IsActive = false;
            NavigationManager.NavigateTo($"/admin/adminpages/coursebuilder/{newCourse.CourseId}");
        }
    }

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File; // If expecting single file. For multiple files, use e.GetMultipleFiles()
    }

    private async Task UploadBlobFile()
    {
        if (selectedFile is null)
        {
            return;
        }
        if (selectedFile.Size > maxFileSize)
        {
            message = "File is too big. Maximum allowed size 2 MB.";
            return;
        }
        var uniqueId = Guid.NewGuid().ToString();
        var originalExtension = Path.GetExtension(selectedFile.Name);
        var fileName = $"course{newCourse.CourseId}img{uniqueId}{originalExtension}";
        using (var stream = selectedFile.OpenReadStream(maxFileSize))
        {
            var fileUrl = await BlobRepositoryService.UploadBlobFileAsync(fileName, stream);
            newCourse.ImageUrl = fileUrl;
        }
    }

    private bool IsPriceReadOnly() => Input.AccessLevel == "Free" || Input.AccessLevel == "Restricted";

    private void OnAccessLevelChanged()
    {
        if (IsPriceReadOnly())
        {
            Input.Price = 0;

        }
    }
}
