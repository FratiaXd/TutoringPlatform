@layout ManageCourseBuilderLayout
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@page "/admin/adminpages/coursebuilder/{CourseId:int}"


<h3>Edit Course Details</h3>
<br />
<h4>@message</h4>

<Modal @ref="deleteModal" IsVerticallyCentered="true" />

<EditForm Model="Input" FormName="editcourse" OnValidSubmit="UpdateCourse" method="post">
    <DataAnnotationsValidator />
    <ValidationSummary class="text-danger" role="alert" />
    <div class="form-floating mb-3">
        <InputText @bind-Value="Input.Title" class="form-control" placeholder="Please enter course title." />
        <label for="title" class="form-label">Course Title</label>
        <ValidationMessage For="() => Input.Title" class="text-danger" />
    </div>
    <div class="form-floating mb-3">
        <InputSelect @bind-Value="Input.AccessLevel" class="form-select" @bind-Value:after="OnAccessLevelChanged">
            <option value="" selected disabled>Select option</option>
            @foreach (var level in Enum.GetValues<AccessLevel>())
            {
                <option value="@level.ToString()">@level.ToString()</option>
            }
        </InputSelect>
        <label for="access-level" class="form-label">Course Access Level</label>
    </div>
    <div class="form-floating mb-3">
        <InputNumber @bind-Value="Input.Price" class="form-control" placeholder="Please enter course price." readonly="@IsPriceReadOnly()" />
        <label for="price" class="form-label">Course Price</label>
        <ValidationMessage For="() => Input.Price" class="text-danger" />
    </div>
    <div class="form-floating mb-3">
        <InputText @bind-Value="Input.Description" class="form-control" placeholder="Please enter course description." />
        <label for="description" class="form-label">Course Description</label>
        <ValidationMessage For="() => Input.Description" class="text-danger" />
    </div>
    <div class="form-floating mb-3">
        <InputFile OnChange="HandleFileSelected" />
    </div>
    @if (!string.IsNullOrWhiteSpace(updateCourse?.ImageUrl))
    {
        <br />
        <p>Image: </p>
        <img style="max-width: 400px;" src="@updateCourse.ImageUrl" alt="Course Image" />
        <br />
    }
    <button type="submit" class="w-100 btn btn-lg btn-primary">Save</button>
</EditForm>
<br />
<Button Color="ButtonColor.Danger" @onclick="ShowDelete">Delete Course</Button>

@code {
    [Parameter]
    public int? CourseId { get; set; }

    public Course? updateCourse;

    private Modal deleteModal = default!;

    [SupplyParameterFromForm]
    private CourseInput Input { get; set; } = new CourseInput();
    private string? message;

    private IBrowserFile selectedFile;

    const long maxFileSize = 2 * 1024 * 1024;

    protected override async Task OnInitializedAsync()
    {
        if (CourseId.HasValue)
        {
            updateCourse = await CourseService.GetCourseByIdAsync(CourseId.Value);
            Input.Title = updateCourse.Title;
            Input.Price = updateCourse.Price;
            Input.Description = updateCourse.Description;
            Input.AccessLevel = updateCourse.AccessLevel;
            BuilderState.CourseTitle = updateCourse.Title;
        }
    }

    private async Task UpdateCourse()
    {
        if (CourseId.HasValue)
        {
            updateCourse = await CourseService.GetCourseByIdAsync(CourseId.Value);
            if (await CourseService.IsTitleUsedAsync(CourseId.Value, Input.Title))
            {
                message = "The course with this title already exists.";
                return;
            }
            updateCourse.Title = Input.Title;
            updateCourse.Price = Input.Price;
            updateCourse.Description = Input.Description;
            updateCourse.AccessLevel = Input.AccessLevel.ToString();
            updateCourse.Duration = await CountLessons();

            await UploadBlobFile();

            var updateResult = await CourseService.UpdateCourseAsync(updateCourse);
            if (updateResult == null)
            {
                message = "Unexpected error when adding course.";
            }
            else
            {
                BuilderState.CourseTitle = updateCourse.Title;
                message = "Course updated successfully";
            }
        }
    }

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File; // If expecting single file. For multiple files, use e.GetMultipleFiles()
    }

    private async Task UploadBlobFile()
    {
        if (selectedFile is null)
        {
            return;
        }
        if (selectedFile.Size > maxFileSize)
        {
            message = "File is too big. Maximum allowed size 2 MB.";
            return;
        }
        await DeleteBlobFile();
        var uniqueId = Guid.NewGuid().ToString();
        var originalExtension = Path.GetExtension(selectedFile.Name);
        var fileName = $"course{updateCourse.CourseId}img{uniqueId}{originalExtension}";
        using (var stream = selectedFile.OpenReadStream())
        {
            var fileUrl = await BlobRepositoryService.UploadBlobFileAsync(fileName, stream);
            updateCourse.ImageUrl = fileUrl;
        }
    }

    private async Task DeleteBlobFile()
    {
        string previousFileUrl = updateCourse.ImageUrl;
        if (previousFileUrl != null)
        {
            var uri = new Uri(previousFileUrl);
            var previousFileName = Path.GetFileName(uri.LocalPath);
            await BlobRepositoryService.DeleteBlobFileAsync(previousFileName);
        }
    }

    private async Task ShowDelete()
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("RecordId", CourseId);
        parameters.Add("RecordType", "Course");
        await deleteModal.ShowAsync<AdminDelete>(title: "Delete Course", parameters: parameters);
    }

    private bool IsPriceReadOnly() => Input.AccessLevel == "Free" || Input.AccessLevel == "Restricted";

    private void OnAccessLevelChanged()
    {
        if (IsPriceReadOnly())
        {
            Input.Price = 0;

        }
    }

    private async Task<int> CountLessons()
    {
        var courseLessons = await LessonService.GetAllLessonsForCourseAsync(CourseId);
        return courseLessons.Count();
    }
}
