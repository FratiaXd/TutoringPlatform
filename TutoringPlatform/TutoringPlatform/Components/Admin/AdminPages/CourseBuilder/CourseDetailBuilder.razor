@layout ManageCourseBuilderLayout
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@page "/admin/adminpages/coursebuilder/{CourseId:int}"

<div class="t-border t-border-gray-100 t-rounded-lg">
    <div class="t-py-4 t-px-8">
        <h3 class="t-text-center t-mt-3 t-mb-3 t-text-gray-600 t-mx-4 md:t-mx-20 t-text-2xl t-font-bold t-leading-none t-tracking-tight md:t-text-4xl">Edit Course Details</h3>
        <hr class="t-h-1 t-mx-4 md:t-mx-20 t-my-4 t-bg-gray-800 t-border-4 t-rounded md:t-my-2">

        @if (!string.IsNullOrEmpty(message))
        {
            if (message.Contains("success"))
            {
                <div class="t-flex t-justify-center t-items-center t-p-4 t-mt-4 t-text-sm t-text-green-800 t-border t-border-green-300 t-rounded-lg t-bg-green-50" role="alert">
                    <svg class="t-flex-shrink-0 t-inline t-w-4 t-h-4 me-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5ZM9.5 4a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3ZM12 15H8a1 1 0 0 1 0-2h1v-3H8a1 1 0 0 1 0-2h2a1 1 0 0 1 1 1v4h1a1 1 0 0 1 0 2Z" />
                    </svg>
                    <span class="t-sr-only">Info</span>
                    <div>
                        <span class="t-font-medium">@message</span>
                    </div>
                </div>
            }
            else
            {
                <div class="t-flex t-justify-center t-items-center t-p-4 t-mt-4 t-text-sm t-text-red-800 t-border t-border-red-300 t-rounded-lg t-bg-red-50" role="alert">
                    <svg class="t-flex-shrink-0 t-inline t-w-4 t-h-4 me-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5ZM9.5 4a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3ZM12 15H8a1 1 0 0 1 0-2h1v-3H8a1 1 0 0 1 0-2h2a1 1 0 0 1 1 1v4h1a1 1 0 0 1 0 2Z" />
                    </svg>
                    <span class="t-sr-only">Info</span>
                    <div>
                        <span class="t-font-medium">@message</span>
                    </div>
                </div>
            }
        }

        <Modal @ref="deleteModal" IsVerticallyCentered="true" />
        <div class="t-mt-8 t-mx-3">
            <EditForm Model="Input" FormName="editcourse" OnValidSubmit="UpdateCourse" method="post">
                <DataAnnotationsValidator />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Title" class="form-control" placeholder="Please enter course title." />
                    <label for="title" class="form-label">Course Title</label>
                    <ValidationMessage For="() => Input.Title" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputSelect @bind-Value="Input.AccessLevel" class="form-select" @bind-Value:after="OnAccessLevelChanged">
                        <option value="" selected disabled>Select option</option>
                        @foreach (var level in Enum.GetValues<AccessLevel>())
                        {
                            <option value="@level.ToString()">@level.ToString()</option>
                        }
                    </InputSelect>
                    <label for="access-level" class="form-label">Course Access Level</label>
                </div>
                <div class="form-floating mb-3">
                    <InputNumber @bind-Value="Input.Price" class="form-control" placeholder="Please enter course price." readonly="@IsPriceReadOnly()" />
                    <label for="price" class="form-label">Course Price</label>
                    <ValidationMessage For="() => Input.Price" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputTextArea @bind-Value="Input.Description" class="form-control" placeholder="Please enter course description." />
                    <label for="description" class="form-label">Course Description</label>
                    <ValidationMessage For="() => Input.Description" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputFile OnChange="HandleFileSelected" class="t-block t-w-full t-text-sm t-text-gray-900 t-border t-border-gray-300 t-rounded-lg t-cursor-pointer t-bg-gray-50 dark:t-text-gray-400 focus:t-outline-none dark:t-bg-gray-700 dark:t-border-gray-600 dark:t-placeholder-gray-400" />
                </div>
                @if (!string.IsNullOrWhiteSpace(updateCourse?.ImageUrl))
                {
                    <div class="t-flex t-justify-center t-mt-2">
                        <img class="t-w-full t-max-w-[600px] t-min-w-[300px]" src="@updateCourse.ImageUrl" alt="Course Image" />
                    </div>
                }
                <div class="t-mx-4 md:t-mx-10 t-mt-4 md:t-mt-8 t-mb-8 t-flex t-justify-center">
                    <button type="submit" disabled="@IsCoursePublished" class="t-text-white t-mx-auto disabled:t-cursor-not-allowed disabled:t-opacity-50 t-bg-gradient-to-br t-from-green-400 t-to-blue-600 hover:t-bg-gradient-to-bl focus:t-ring-4 focus:t-outline-none focus:t-ring-green-200 t-font-medium t-rounded-lg t-text-sm t-w-64 t-px-5 t-py-2.5">Save</button>
                </div>
            </EditForm>
            <div class="t-mx-4 md:t-mx-10 t-mt-4 md:t-mt-8 t-mb-8 t-flex t-justify-center">
                <button type="button" @onclick="ShowDelete" disabled="@IsCoursePublished" class="t-text-white disabled:t-cursor-not-allowed disabled:t-opacity-50 t-mx-auto t-bg-gradient-to-r t-from-red-400 t-via-red-500 t-to-red-600 hover:t-bg-gradient-to-br focus:t-ring-4 focus:t-outline-none focus:t-ring-red-300 dark:focus:t-ring-red-800 t-shadow-lg shadow-red-500/50 dark:t-shadow-lg dark:shadow-red-800/80 t-font-medium t-rounded-lg t-text-sm t-w-64 t-px-5 t-py-2.5">Delete Course</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int? CourseId { get; set; }

    public Course? updateCourse;

    private Modal deleteModal = default!;

    [SupplyParameterFromForm]
    private CourseInput Input { get; set; } = new CourseInput();

    private string? message;

    private IBrowserFile selectedFile;

    const long maxFileSize = 2 * 1024 * 1024;

    public bool? IsCoursePublished;

    protected override async Task OnInitializedAsync()
    {
        if (CourseId.HasValue)
        {
            updateCourse = await CourseService.GetCourseByIdAsync(CourseId.Value);
            Input.Title = updateCourse.Title;
            Input.Price = decimal.Round(updateCourse.Price, 2);
            Input.Description = updateCourse.Description;
            Input.AccessLevel = updateCourse.AccessLevel;
            BuilderState.CourseTitle = updateCourse.Title;
            IsCoursePublished = updateCourse.IsActive;
        }
    }

    private async Task UpdateCourse()
    {
        if (CourseId.HasValue)
        {
            updateCourse = await CourseService.GetCourseByIdAsync(CourseId.Value);
            if (await CourseService.IsTitleUsedAsync(CourseId.Value, Input.Title))
            {
                message = "The course with this title already exists.";
                return;
            }
            updateCourse.Title = Input.Title;
            updateCourse.Price = decimal.Round(Input.Price, 2);
            updateCourse.Description = Input.Description;
            updateCourse.AccessLevel = Input.AccessLevel.ToString();
            updateCourse.Duration = await CountLessons();

            await UploadBlobFile();

            var updateResult = await CourseService.UpdateCourseAsync(updateCourse);
            if (updateResult == null)
            {
                message = "Unexpected error when adding course.";
            }
            else
            {
                BuilderState.CourseTitle = updateCourse.Title;
                message = "Course updated successfully";
            }
        }
    }

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File; // If expecting single file. For multiple files, use e.GetMultipleFiles()
    }

    private async Task UploadBlobFile()
    {
        if (selectedFile is null)
        {
            return;
        }
        if (selectedFile.Size > maxFileSize)
        {
            message = "File is too big. Maximum allowed size 2 MB.";
            return;
        }
        await DeleteBlobFile();
        var uniqueId = Guid.NewGuid().ToString();
        var originalExtension = Path.GetExtension(selectedFile.Name);
        var fileName = $"course{updateCourse.CourseId}img{uniqueId}{originalExtension}";
        using (var stream = selectedFile.OpenReadStream(maxFileSize))
        {
            var fileUrl = await BlobRepositoryService.UploadBlobFileAsync(fileName, stream);
            updateCourse.ImageUrl = fileUrl;
        }
    }

    private async Task DeleteBlobFile()
    {
        string previousFileUrl = updateCourse.ImageUrl;
        if (previousFileUrl != null)
        {
            var uri = new Uri(previousFileUrl);
            var previousFileName = Path.GetFileName(uri.LocalPath);
            await BlobRepositoryService.DeleteBlobFileAsync(previousFileName);
        }
    }

    private async Task ShowDelete()
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("RecordId", CourseId);
        parameters.Add("RecordType", "Course");
        await deleteModal.ShowAsync<AdminDelete>(title: "Delete Course", parameters: parameters);
    }

    private bool IsPriceReadOnly() => Input.AccessLevel == "Free" || Input.AccessLevel == "Restricted";

    private void OnAccessLevelChanged()
    {
        if (IsPriceReadOnly())
        {
            Input.Price = 0;

        }
    }

    private async Task<int> CountLessons()
    {
        var courseLessons = await LessonService.GetAllLessonsForCourseAsync(CourseId);
        return courseLessons.Count();
    }
}
