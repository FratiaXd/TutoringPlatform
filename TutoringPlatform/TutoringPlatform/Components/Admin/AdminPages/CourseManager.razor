@page "/admin/adminpages/coursemanager"
@attribute [Authorize(Roles = "Admin")]
@rendermode InteractiveServer
@attribute [StreamRendering]
@inject NavigationManager NavigationManager
@inject ICourseService CourseService
@inject BuilderStateService BuilderState

<h3>CourseManager</h3>

<button class="btn btn-primary" @onclick="OpenCourseBuilder">Create New Course</button>
<br />
<br />
<h5>Draft courses</h5>

@if (coursesDraft != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Course name</th>
                <th>Description</th>
                <th>Price</th>
                <th>Access Level</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var course in coursesDraft)
            {
                <tr>
                    <td>@course.Title</td>
                    <td>@course.Description</td>
                    <td>@course.Price</td>
                    <td>@course.AccessLevel</td>
                    <td><button class="btn btn-primary" @onclick="() => EditCourse(course.CourseId)">Edit Draft</button></td>
                </tr>
            }
        </tbody>
    </table>
}

<br />
<br />
<h5>Published courses</h5>

@if (coursesPublished != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Course name</th>
                <th>Description</th>
                <th>Price</th>
                <th>Access Level</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var course in coursesPublished)
            {
                <tr>
                    <td>@course.Title</td>
                    <td>@course.Description</td>
                    <td>@course.Price</td>
                    <td>@course.AccessLevel</td>
                    <td><button class="btn btn-primary" @onclick="() => EditCourse(course.CourseId)">Edit Course</button></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    List<Course> coursesDraft;
    List<Course> coursesPublished;

    protected override async Task OnInitializedAsync()
    {
        coursesDraft = new List<Course>();
        coursesPublished = new List<Course>();
        var coursesListPubl = await CourseService.GetPublishedCoursesAsync();
        var coursesListDraft = await CourseService.GetDraftCoursesAsync();
        coursesPublished.AddRange(coursesListPubl);
        coursesDraft.AddRange(coursesListDraft);
    }

    void OpenCourseBuilder()
    {
        NavigationManager.NavigateTo("/admin/adminpages/initializenewcourse");
    }

    void EditCourse(int courseId)
    {
        BuilderState.CourseId = courseId;
        NavigationManager.NavigateTo($"/admin/adminpages/coursebuilder/{courseId}");
    }
}
