@using TutoringPlatform.Shared.Interfaces
@using TutoringPlatform.Services
@using System.Linq
@using TutoringPlatform.Shared.Models
@inject BuilderStateService BuilderState
@inject ILessonService LessonService
@rendermode InteractiveServer


<ul class="nav nav-pills flex-column">
    <li class="nav-item">
        <Button Color="ButtonColor.Success" @onclick="AddLesson"> + Add Lesson </Button>
    </li>
    <li class="nav-item">
        <NavLink class="nav-link" href="@($"/admin/adminpages/coursebuilder/{BuilderState.CourseId}")" Match="NavLinkMatch.All">@BuilderState.CourseTitle</NavLink>
    </li>
    @foreach (var lesson in lessons)
    {
        <li class="nav-item">
            <NavLink class="nav-link" href="@($"/admin/adminpages/coursebuilder/lessondetailbuilder/{lesson.LessonId}")">@BuilderState.GetLessonTitle(lesson.LessonId)</NavLink>
            <ul>
                @if (lesson.Quiz != null)
                {
                    <li>
                        <NavLink class="nav-link">@lesson.Quiz.QuizName</NavLink>
                    </li>
                }
                @if (lesson.Assignment != null)
                {
                    <li>
                        <NavLink class="nav-link">@lesson.Assignment.TaskName</NavLink>
                    </li>
                }
            </ul>
        </li>
    }
</ul>

@code {
    List<Lesson> lessons;

    protected override async Task OnInitializedAsync()
    {
        BuilderState.OnChange += StateHasChanged;
        await LoadLessons();
    }

    public void Dispose()
    {
        BuilderState.OnChange -= StateHasChanged;
    }

    private async Task LoadLessons()
    {
        lessons = new List<Lesson>();
        var lessonsList = await LessonService.GetAllLessonsForCourse(BuilderState.CourseId);
        if (lessonsList != null)
        {
            lessons.AddRange(lessonsList);
            foreach (var lesson in lessons)
            {
                BuilderState.UpdateLessonTitle(lesson.LessonId, lesson.LessonTitle);
            }
        }
    }

    public async void AddLesson()
    {
        var listSize = lessons.Count();
        var lessonName = lessons.Count() + 1;
        var addLesson = new Lesson
        {
            LessonTitle = "New Lesson" + BuilderState.CourseTitle + lessonName.ToString(),
            LessonOrder = lessonName,
            CourseId = BuilderState.CourseId           
        };
        var addedLesson = await LessonService.AddLessonAsync(addLesson);
        if (addedLesson != null)
        {
            lessons.Add(addedLesson);
            BuilderState.UpdateLessonTitle(addedLesson.LessonId, addedLesson.LessonTitle);
        }
    }
}
