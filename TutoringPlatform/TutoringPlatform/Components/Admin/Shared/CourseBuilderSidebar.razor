@using TutoringPlatform.Components.Admin.AdminPages.CourseBuilder
@using TutoringPlatform.Shared.Interfaces
@using TutoringPlatform.Services
@using System.Linq
@using TutoringPlatform.Shared.Models
@inject BuilderStateService BuilderState
@inject ILessonService LessonService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<Modal @ref="publishModal" IsVerticallyCentered="true" />
<Modal @ref="unpublishModal" IsVerticallyCentered="true" />

@if (BuilderState.IsActive)
{
    <Button Color="ButtonColor.Success" @onclick="ShowUnpublish">Unpublish Course</Button>
}
else
{
    <Button Color="ButtonColor.Success" @onclick="ShowPublish">Publish Course</Button>
}

<br />

<ul class="nav nav-pills flex-column">
    <li class="nav-item">
        <Button Color="ButtonColor.Success" @onclick="AddLesson"> + Add Lesson </Button>
    </li>
    <li class="nav-item">
        <NavLink class="nav-link" href="@($"/admin/adminpages/coursebuilder/{BuilderState.CourseId}")" Match="NavLinkMatch.All">@BuilderState.CourseTitle</NavLink>
    </li>
    @foreach (var lesson in lessons)
    {
        var currentLesson = BuilderState.GetLesson(lesson.LessonId);
        if (currentLesson != null)
        {
            <li class="nav-item">
                <NavLink class="nav-link" href="@($"/admin/adminpages/coursebuilder/lessondetailbuilder/{lesson.LessonId}")">@currentLesson.LessonTitle</NavLink>
                    <ul>
                        @if (currentLesson.Quiz != null)
                    {
                        <li>
                            <NavLink class="nav-link" href="@($"/admin/adminpages/coursebuilder/quizdetailbuilder/{currentLesson.Quiz.QuizId}")">@currentLesson.Quiz.QuizName</NavLink>
                        </li>
                    }
                    @if (currentLesson.Assignment != null)
                    {
                        <li>
                            <NavLink class="nav-link" href="@($"/admin/adminpages/coursebuilder/assignmentdetailbuilder/{currentLesson.Assignment.AssignmentId}")">@currentLesson.Assignment.TaskName</NavLink>
                        </li>
                    }
                </ul>
            </li>
        }
    }
</ul>

@code {
    List<Lesson> lessons;

    private Modal publishModal = default!;
    private Modal unpublishModal = default!;

    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += HandleLocationChanged;
        BuilderState.OnChange += StateHasChanged;
        await LoadLessons();
    }

    private void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        // Check if the user navigated away from the course builder page
        if (!e.Location.Contains("/admin/adminpages/coursebuilder"))
        {
            Dispose();
        }
    }

    public void Dispose()
    {
        BuilderState.ClearCourseState();
        BuilderState.OnChange -= StateHasChanged;
    }

    private async Task LoadLessons()
    {
        lessons = new List<Lesson>();
        var lessonsList = await LessonService.GetAllLessonsForCourse(BuilderState.CourseId);
        if (lessonsList != null)
        {
            lessons.AddRange(lessonsList);
            foreach (var lesson in lessons)
            {
                BuilderState.UpdateLesson(lesson.LessonId, lesson);
            }
        }
    }

    public async void AddLesson()
    {
        var listSize = lessons.Count();
        var lessonName = lessons.Count() + 1;
        var addLesson = new Lesson
        {
            LessonTitle = "New Lesson" + BuilderState.CourseTitle + lessonName.ToString(),
            LessonOrder = lessonName,
            CourseId = BuilderState.CourseId           
        };
        var addedLesson = await LessonService.AddLessonAsync(addLesson);
        if (addedLesson != null)
        {
            lessons.Add(addedLesson);
            BuilderState.UpdateLesson(addedLesson.LessonId, addedLesson);
        }
    }

    private async Task ShowPublish()
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("RecordId", BuilderState.CourseId);
        parameters.Add("RecordType", "CoursePublish");
        await publishModal.ShowAsync<AdminDelete>(title: "Publish Course", parameters: parameters);
    }

    private async Task ShowUnpublish()
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("RecordId", BuilderState.CourseId);
        parameters.Add("RecordType", "CourseUnpublish");
        await publishModal.ShowAsync<AdminDelete>(title: "Unpublish Course", parameters: parameters);
    }
}
