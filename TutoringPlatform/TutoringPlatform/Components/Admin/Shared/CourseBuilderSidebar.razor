@using TutoringPlatform.Components.Admin.AdminPages.CourseBuilder
@using TutoringPlatform.Shared.Interfaces
@using TutoringPlatform.Services
@using System.Linq
@using TutoringPlatform.Shared.Models
@inject BuilderStateService BuilderState
@inject ILessonService LessonService
@inject ICourseService CourseService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<Modal @ref="publishModal" IsVerticallyCentered="true" />
<Modal @ref="unpublishModal" IsVerticallyCentered="true" />

<div class="t-flex t-justify-center t-mt-3 t-mb-6">
    @if (BuilderState.IsActive)
    {
        <button type="button" @onclick="ShowUnpublish" class="t-text-white t-mx-auto t-bg-gray-400 hover:t-bg-gray-700 focus:t-outline-none focus:t-ring-4 focus:t-ring-gray-300 t-font-medium t-font-medium t-rounded-lg t-text-sm t-w-64 t-px-5 t-py-2.5">Unpublish Course</button>
    }
    else
    {
        <button type="button" @onclick="ShowPublish" class="t-mx-auto t-text-prim t-bg-sec focus:t-ring-4 focus:t-ring-yellow-200 hover:t-text-prim hover:t-bg-lyel t-font-medium t-rounded-lg t-text-sm t-w-64 t-px-5 t-py-2.5">Publish Course</button>
    }
</div>

<div class="t-flex t-justify-center t-mb-3">
    <button type="button" @onclick="AddLesson" disabled="@BuilderState.IsActive" class="t-text-white disabled:t-cursor-not-allowed disabled:t-opacity-50 t-mx-auto t-bg-grn hover:t-bg-drkgrn focus:t-ring-4 focus:t-outline-none focus:t-ring-lgrn dark:focus:t-ring-green-800 t-font-medium t-rounded-lg t-text-sm t-w-64 t-px-5 t-py-2.5">+ Add Lesson</button>
</div>

<div class="t-flex t-flex-col lg:t-flex">
    <ul class="t-border t-border-gray-100 t-rounded-lg t-bg-gray-50 t-p-2 t-font-semibold lg:t-mb-4">
        <li>
            <a href="@($"/admin/adminpages/coursebuilder/{BuilderState.CourseId}")" class="t-block t-py-2 t-px-3 t-text-gray-900 t-rounded hover:t-bg-gray-100 hover:t-text-blue-700 t-cursor-pointer">
                @BuilderState.CourseTitle
            </a>
        </li>
        @foreach (var lesson in lessons)
        {
            var currentLesson = BuilderState.GetLesson(lesson.LessonId);
            if (currentLesson != null)
            {
                <li>
                    <a href="@($"/admin/adminpages/coursebuilder/lessondetailbuilder/{lesson.LessonId}")" class="t-block t-py-2 t-px-3 t-text-gray-900 t-rounded hover:t-bg-gray-100 hover:t-text-blue-700 t-cursor-pointer">
                        @currentLesson.LessonTitle
                    </a>
                    <ul>
                        @if (currentLesson.Quiz != null)
                        {
                            <li>
                                <a href="@($"/admin/adminpages/coursebuilder/quizdetailbuilder/{currentLesson.Quiz.QuizId}")" class="t-block t-py-2 t-ml-5 t-pl-4 t-pr-5 t-text-gray-900 t-rounded t-font-normal hover:t-bg-gray-100 hover:t-text-blue-700 t-cursor-pointer">
                                    @currentLesson.Quiz.QuizName
                                </a>
                            </li>
                        }
                        @if (currentLesson.Assignment != null)
                        {
                            <li>
                                <a href="@($"/admin/adminpages/coursebuilder/assignmentdetailbuilder/{currentLesson.Assignment.AssignmentId}")" class="t-block t-py-2 t-ml-5 t-pl-4 t-pr-5 t-text-gray-900 t-rounded t-font-normal hover:t-bg-gray-100 hover:t-text-blue-700 t-cursor-pointer">
                                    @currentLesson.Assignment.TaskName
                                </a>
                            </li>
                        }
                    </ul>
                </li>
            }
        }
    </ul>
</div>

@code {
    List<Lesson> lessons;

    private Modal publishModal = default!;
    private Modal unpublishModal = default!;

    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += HandleLocationChanged;
        BuilderState.OnChange += StateHasChanged;
        await LoadLessons();
    }

    private void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        // Check if the user navigated away from the course builder page
        if (!e.Location.Contains("/admin/adminpages/coursebuilder"))
        {
            Dispose();
        }
    }

    public void Dispose()
    {
        BuilderState.ClearCourseState();
        BuilderState.OnChange -= StateHasChanged;
    }

    private async Task LoadLessons()
    {
        lessons = new List<Lesson>();
        var lessonsList = await LessonService.GetAllLessonsForCourseAsync(BuilderState.CourseId);
        if (lessonsList != null)
        {
            lessons.AddRange(lessonsList);
            foreach (var lesson in lessons)
            {
                BuilderState.UpdateLesson(lesson.LessonId, lesson);
            }
        }
    }

    public async void AddLesson()
    {
        var listSize = lessons.Count();
        var lessonName = lessons.Count() + 1;
        var addLesson = new Lesson
        {
            LessonTitle = "New Lesson " + BuilderState.CourseTitle + " " + lessonName.ToString(),
            LessonOrder = lessonName,
            CourseId = BuilderState.CourseId           
        };
        var addedLesson = await LessonService.AddLessonAsync(addLesson);
        if (addedLesson != null)
        {
            lessons.Add(addedLesson);
            BuilderState.UpdateLesson(addedLesson.LessonId, addedLesson);
            await CourseService.UpdateCourseDurationAsync(addedLesson.CourseId, true);
        }
    }

    private async Task ShowPublish()
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("RecordId", BuilderState.CourseId);
        parameters.Add("RecordType", "CoursePublish");
        await publishModal.ShowAsync<AdminDelete>(title: "Publish Course", parameters: parameters);
    }

    private async Task ShowUnpublish()
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("RecordId", BuilderState.CourseId);
        parameters.Add("RecordType", "CourseUnpublish");
        await publishModal.ShowAsync<AdminDelete>(title: "Unpublish Course", parameters: parameters);
    }
}
