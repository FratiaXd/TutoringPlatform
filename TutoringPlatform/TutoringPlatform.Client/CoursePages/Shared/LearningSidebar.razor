@rendermode @(new InteractiveAutoRenderMode(prerender: false))

<div class="t-flex t-justify-end"> 
    <button @onclick="ToggleSidebar" class="lg:t-hidden t-my-1 t-inline-flex t-items-center t-p-2 t-w-10 t-h-10 t-justify-center t-text-sm t-text-gray-500 t-rounded-lg hover:t-bg-gray-100 focus:t-outline-none focus:t-ring-2 focus:t-ring-gray-200" type="button">
        <svg class="t-w-4 t-h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6">
            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 4 4 4-4" />
        </svg>
    </button>
</div>
<hr class="lg:t-hidden"/>



<div class="@GetSidebarClass()">
    <ul class="t-border t-border-gray-100 t-rounded-lg t-bg-gray-50 t-p-2 t-font-semibold lg:t-my-4">
        @foreach (var lesson in lessons)
        {
            if (lesson != null && lesson.LessonProgresses.Count != 0)
            {
                <li>
                    <div @onclick="() => HandleLessonClick(lesson)" class=@GetSidebarOptLessonClass(lesson.LessonTitle)>
                        <p>@lesson.LessonTitle</p>
                    </div>
                    <ul>
                        @if (lesson.Quiz.QuizName != null)
                        {
                            <li>
                                <div @onclick="() => HandleQuizClick(lesson)" class=@GetSidebarOptClass(lesson.LessonTitle, lesson.Quiz.QuizName)>
                                    <p>@lesson.Quiz.QuizName</p>
                                </div>
                            </li>
                        }
                        @if (lesson.Assignment.TaskName != null)
                        {
                            <li>
                                <div @onclick="() => HandleAssignmentClick(lesson)" class=@GetSidebarOptClass(lesson.LessonTitle, lesson.Assignment.TaskName)>
                                    <p>@lesson.Assignment.TaskName</p>
                                </div>
                            </li>
                        }
                    </ul>
                </li>
            }
            else
            {
                <li>
                    <div class="t-flex t-items-center t-justify-between t-py-2 t-px-3 t-text-gray-400 t-rounded t-bg-gray-200 t-cursor-not-allowed">
                        <p>@lesson.LessonTitle</p>
                        <svg xmlns="http://www.w3.org/2000/svg" height="14" width="12.25" viewBox="0 0 448 512"><!--!Font Awesome Free 6.5.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path fill="#9ca3af" d="M144 144v48H304V144c0-44.2-35.8-80-80-80s-80 35.8-80 80zM80 192V144C80 64.5 144.5 0 224 0s144 64.5 144 144v48h16c35.3 0 64 28.7 64 64V448c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V256c0-35.3 28.7-64 64-64H80z" /></svg>
                    </div>
                    <ul>
                        @if (lesson.Quiz.QuizName != null)
                        {
                            <li>
                                <div class="t-flex t-items-center t-justify-between t-py-2 t-px-3 t-text-gray-400 t-rounded t-bg-gray-200 t-cursor-not-allowed">
                                    <p class="t-ml-5 t-pl-4">@lesson.Quiz.QuizName</p>
                                    <svg xmlns="http://www.w3.org/2000/svg" height="14" width="12.25" viewBox="0 0 448 512"><!--!Font Awesome Free 6.5.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path fill="#9ca3af" d="M144 144v48H304V144c0-44.2-35.8-80-80-80s-80 35.8-80 80zM80 192V144C80 64.5 144.5 0 224 0s144 64.5 144 144v48h16c35.3 0 64 28.7 64 64V448c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V256c0-35.3 28.7-64 64-64H80z" /></svg>
                                </div>
                            </li>
                        }
                        @if (lesson.Assignment.TaskName != null)
                        {
                            <li>
                                <div class="t-flex t-items-center t-justify-between t-py-2 t-px-3 t-text-gray-400 t-rounded t-bg-gray-200 t-cursor-not-allowed">
                                    <p class="t-ml-5 t-pl-4">@lesson.Assignment.TaskName</p>
                                    <svg xmlns="http://www.w3.org/2000/svg" height="14" width="12.25" viewBox="0 0 448 512"><!--!Font Awesome Free 6.5.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path fill="#9ca3af" d="M144 144v48H304V144c0-44.2-35.8-80-80-80s-80 35.8-80 80zM80 192V144C80 64.5 144.5 0 224 0s144 64.5 144 144v48h16c35.3 0 64 28.7 64 64V448c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V256c0-35.3 28.7-64 64-64H80z" /></svg>
                                </div>
                            </li>
                        }
                    </ul>
                </li>
            }
        }
    </ul>
</div>

<hr />

@code {
    [Parameter]
    public int CourseId { get; set; }
    public Course currentCourse { get; set; }
    [Parameter]
    public string CurUserId { get; set; }
    [Parameter]
    public List<Lesson> lessons { get; set; }

    [Parameter]
    public EventCallback<Lesson> OnLessonClicked { get; set; }
    [Parameter]
    public EventCallback<Lesson> OnQuizClicked { get; set; }
    [Parameter]
    public EventCallback<Lesson> OnAssignmentClicked { get; set; }

    private bool isSidebarCollapsed = true;

    private string? OptionName = string.Empty;
    private string? LessonName = string.Empty;

    private void ToggleSidebar()
    {
        isSidebarCollapsed = !isSidebarCollapsed;
    }

    private string GetSidebarClass()
    {
        string baseClasses = "t-flex t-flex-col lg:t-flex";
        if (isSidebarCollapsed)
        {
            return $"{baseClasses} t-hidden";
        }
        else
        {
            return baseClasses;
        }
    }

    public void ToggleSidebarOpt(string lesson, string name)
    {
        LessonName = lesson;
        OptionName = name;
    }

    private string GetSidebarOptLessonClass(string option)
    {
        if (option.Equals(OptionName))
        {
            return "t-block t-py-2 t-px-3 t-rounded t-bg-gray-200 t-text-blue-700 t-cursor-pointer";
        }
        else
        {
            return "t-block t-py-2 t-px-3 t-text-gray-900 t-rounded hover:t-bg-gray-100 hover:t-text-blue-700 t-cursor-pointer";
        }
    }

    private string GetSidebarOptClass(string lesson, string option)
    {
        if (option.Equals(OptionName) && lesson.Equals(LessonName))
        {
            return "t-py-2 t-ml-5 t-pl-4 t-pr-5 t-rounded t-font-normal t-bg-gray-200 t-text-blue-700 t-cursor-pointer";
        }
        else
        {
            return "t-py-2 t-ml-5 t-pl-4 t-pr-5 t-text-gray-900 t-rounded t-font-normal hover:t-bg-gray-100 hover:t-text-blue-700 t-cursor-pointer";
        }
    }

    private async Task HandleLessonClick(Lesson lesson)
    {
        await OnLessonClicked.InvokeAsync(lesson);
        if (lesson is not null)
        {
            ToggleSidebarOpt(lesson.LessonTitle, lesson.LessonTitle);
        }
    }

    private async Task HandleQuizClick(Lesson lesson)
    {
        var quizInfo = await QuizService.GetQuizWithQandOAsync(lesson.Quiz.QuizId);
        lesson.Quiz = quizInfo;
        await OnQuizClicked.InvokeAsync(lesson);
        if (lesson is not null)
        {
            ToggleSidebarOpt(lesson.LessonTitle, quizInfo.QuizName);
        }
    }

    private async Task HandleAssignmentClick(Lesson lesson)
    {
        await OnAssignmentClicked.InvokeAsync(lesson);
        if (lesson is not null)
        {
            ToggleSidebarOpt(lesson.LessonTitle, lesson.Assignment.TaskName);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        currentCourse = await CourseService.GetCourseByIdAsync(CourseId);

        var inProgressLesson = lessons.FirstOrDefault(l =>
        l.LessonProgresses.Any(lp => lp.UserId == CurUserId && lp.LessonStatus == "In Progress"));

        if (inProgressLesson != null)
        {
            // Invoke the lesson clicked event callback to render the lesson content
            await HandleLessonClick(inProgressLesson);
        }
        else
        {
            var enrollments = await EnrollmentService.GetAllUserEnrollmentsAsync(CurUserId);
            var currentEnrollment = enrollments.FirstOrDefault(e => e.CourseId == currentCourse.CourseId);
            var lastestProgressLesson = lessons.FirstOrDefault(l =>
                l.LessonProgresses.Any(lp => lp.UserId == CurUserId && lp.LessonId == currentEnrollment.LatestLessonId));
            await HandleLessonClick(lastestProgressLesson);
        }
    }
}
