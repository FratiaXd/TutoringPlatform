@rendermode @(new InteractiveAutoRenderMode(prerender: false))

<ul class="nav nav-pills flex-column">
    @if (currentCourse != null)
    {
        <li class="nav-item">
            <h4>@currentCourse.Title</h4>
        </li>
    }
    @foreach (var lesson in lessons)
    {
        if (lesson != null && lesson.LessonProgresses.Count != 0)
        {
            <li class="nav-item">
                <NavLink class="nav-link" @onclick="() => HandleLessonClick(lesson)">@lesson.LessonTitle</NavLink>
                    <ul>
                    @if (lesson.Quiz.QuizName != null)
                    {
                        <li>
                            <NavLink class="nav-link" @onclick="() => HandleQuizClick(lesson)">@lesson.Quiz.QuizName</NavLink>
                        </li>
                    }
                    @if (lesson.Assignment.TaskName != null)
                    {
                        <li>
                            <NavLink class="nav-link" @onclick="() => HandleAssignmentClick(lesson)">@lesson.Assignment.TaskName</NavLink>
                        </li>
                    }
                </ul>
            </li>
        }
        else
        {
            <li class="nav-item">
                <NavLink class="nav-link disabled" style="background-color: #d3d3d3">@lesson.LessonTitle</NavLink>
                    <ul>
                        @if (lesson.Quiz.QuizName != null)
                    {
                        <li>
                            <NavLink class="nav-link disabled" style="background-color: #d3d3d3">@lesson.Quiz.QuizName</NavLink>
                        </li>
                    }
                    @if (lesson.Assignment.TaskName != null)
                    {
                        <li>
                            <NavLink class="nav-link disabled" style="background-color: #d3d3d3">@lesson.Assignment.TaskName</NavLink>
                        </li>
                    }
                </ul>
            </li>
        }
    }
</ul>


@code {
    [Parameter]
    public int CourseId { get; set; }
    public Course currentCourse { get; set; }
    [Parameter]
    public string CurUserId { get; set; }
    [Parameter]
    public List<Lesson> lessons { get; set; }

    [Parameter]
    public EventCallback<Lesson> OnLessonClicked { get; set; }
    [Parameter]
    public EventCallback<Lesson> OnQuizClicked { get; set; }
    [Parameter]
    public EventCallback<Lesson> OnAssignmentClicked { get; set; }

    private async Task HandleLessonClick(Lesson lesson)
    {
        await OnLessonClicked.InvokeAsync(lesson);
    }

    private async Task HandleQuizClick(Lesson lesson)
    {
        var quizInfo = await QuizService.GetQuizWithQandOAsync(lesson.Quiz.QuizId);
        lesson.Quiz = quizInfo;
        await OnQuizClicked.InvokeAsync(lesson);
    }

    private async Task HandleAssignmentClick(Lesson lesson)
    {
        await OnAssignmentClicked.InvokeAsync(lesson);
    }

    protected override async Task OnInitializedAsync()
    {
        currentCourse = await CourseService.GetCourseByIdAsync(CourseId);

        var inProgressLesson = lessons.FirstOrDefault(l =>
        l.LessonProgresses.Any(lp => lp.UserId == CurUserId && lp.LessonStatus == "In Progress"));

        if (inProgressLesson != null)
        {
            // Invoke the lesson clicked event callback to render the lesson content
            await HandleLessonClick(inProgressLesson);
        }
        else
        {
            var enrollments = await EnrollmentService.GetAllUserEnrollmentsAsync(CurUserId);
            var currentEnrollment = enrollments.FirstOrDefault(e => e.CourseId == currentCourse.CourseId);
            var lastestProgressLesson = lessons.FirstOrDefault(l =>
                l.LessonProgresses.Any(lp => lp.UserId == CurUserId && lp.LessonId == currentEnrollment.LatestLessonId));
            await HandleLessonClick(lastestProgressLesson);
        }
    }
}
