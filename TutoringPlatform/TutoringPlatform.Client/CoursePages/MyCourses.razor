@page "/mycourses"
@rendermode InteractiveAuto
@implements IDisposable
@inject PersistentComponentState ApplicationState
<PageTitle>My Courses</PageTitle>

<div class="t-flex t-flex-col text-center t-mt-8 t-mb-3 ">
    <h3 class="t-text-3xl t-text-prim t-font-bold md:t-text-4xl t-mb-4">My Courses</h3>
    <p class="t-mb-1 t-mt-1 t-text-lg t-font-normal t-text-gray-500 dark:t-text-gray-400">A list of courses you are enrolled to:</p>
    <hr class="t-h-1 t-mx-4 md:t-mx-20 t-my-4 t-bg-gray-800 t-border-4 t-rounded md:t-my-2">
</div>

<div class="t-mt-5">
    @if(Enrollments.Count > 0)
    {
        @foreach (var enrollment in Enrollments)
        {
            <div @onclick="() => OpenCourse(enrollment)" class="t-min-h-40 hover:t-cursor-pointer t-mb-5 t-flex t-flex-col t-items-center t-bg-white t-border t-border-gray-200 t-rounded-lg t-shadow md:t-flex-row md:t-max-w-5xl md:t-h-auto t-mx-auto hover:t-bg-gray-100">
                <img class="t-object-cover t-w-full t-rounded-t-lg t-h-48 md:t-h-40 md:t-w-64 md:t-rounded-none md:t-rounded-l-lg" src="@enrollment.Course.ImageUrl" alt="">
                <div class="t-flex t-flex-col t-justify-between t-p-4 t-leading-normal">
                    <h5 class="t-text-2xl t-font-bold t-tracking-tight t-text-gray-900 dark:t-text-white">@enrollment.Course.Title</h5>
                    <p class="t-mb-2 t-text-gray-500 t-italic t-font-bold">Currently: @enrollment.LatestLesson.LessonOrder/@enrollment.Course.Duration</p>
                </div>
                <div class="md:t-ml-auto t-p-4 md:t-pr-10">
                    <p class="t-text-grn t-font-bold t-uppercase">@enrollment.EnrollmentStatus</p>
                </div>
            </div>
        }
    }
    else
    {
        <div class="t-min-h-40 t-mb-5 t-flex t-items-center t-justify-center t-bg-gray-100 t-border t-border-gray-200 t-rounded-lg t-shadow md:t-max-w-5xl md:t-h-auto t-mx-auto">
            <p class="t-text-gray-500">Empty</p>
        </div>
    }
</div>


<div class="t-flex t-flex-col text-center t-mt-8">
    <p class="t-mb-1 t-mt-1 t-text-lg t-font-normal t-text-gray-500 dark:t-text-gray-400">A list of courses you completed:</p>
    <hr class="t-h-1 t-mx-4 md:t-mx-20 t-my-4 t-bg-gray-800 t-border-4 t-rounded md:t-my-2">
</div>

<div class="t-mt-5">
    @if (EnrollmentsCompleted.Count > 0)
    {
        @foreach (var enrollment in EnrollmentsCompleted)
        {
            <div @onclick="() => OpenCourse(enrollment)" class="t-min-h-40 hover:t-cursor-pointer t-mb-5 t-flex t-flex-col t-items-center t-bg-white t-border t-border-gray-200 t-rounded-lg t-shadow md:t-flex-row md:t-max-w-5xl md:t-h-auto t-mx-auto hover:t-bg-gray-100">
                <img class="t-object-cover t-w-full t-rounded-t-lg t-h-48 md:t-h-40 md:t-w-64 md:t-rounded-none md:t-rounded-l-lg" src="@enrollment.Course.ImageUrl" alt="">
                <div class="t-flex t-flex-col t-justify-between t-p-4 t-leading-normal">
                    <h5 class="t-text-2xl t-font-bold t-tracking-tight t-text-gray-900 dark:t-text-white">@enrollment.Course.Title</h5>
                    <p class="t-mb-2 t-text-gray-500 t-italic t-font-bold">Currently: @enrollment.LatestLesson.LessonOrder/@enrollment.Course.Duration</p>
                </div>
                <div class="md:t-ml-auto t-p-4 md:t-pr-10">
                    <p class="t-text-grn t-font-bold t-uppercase t-subpixel-antialiased">@enrollment.EnrollmentStatus</p>
                </div>
            </div>
        }
    }
    else
    {
        <div class="t-min-h-40 t-mb-5 t-flex t-items-center t-justify-center t-bg-gray-100 t-border t-border-gray-200 t-rounded-lg t-shadow md:t-max-w-5xl md:t-h-auto t-mx-auto">
            <p class="t-text-gray-500">Empty</p>
        </div>
    }
</div>

@* @if (enrollment.Course.IsActive)
{
    <td><button class="btn btn-primary" @onclick="() => OpenCourse(enrollment)">Open</button></td>
}
else
{
    <td>Under maintainance</td>
}
 *@
@code {
    private PersistingComponentStateSubscription persistentSubscription;

    private string CurUserId { get; set; }
    private List<Enrollment> Enrollments { get; set; } = new List<Enrollment>();
    private List<Enrollment> EnrollmentsCompleted { get; set; } = new List<Enrollment>();

    private Task persistEnrollments()
    {
        ApplicationState.PersistAsJson("enrollments", Enrollments);
        return Task.CompletedTask;
    }

    private Task persistEnrollmentsCompl()
    {
        ApplicationState.PersistAsJson("enrollmentsComp", EnrollmentsCompleted);
        return Task.CompletedTask;
    }

    void IDisposable.Dispose()
    {
        persistentSubscription.Dispose();
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        CurUserId = user.FindFirstValue(ClaimTypes.NameIdentifier);

        persistentSubscription = ApplicationState.RegisterOnPersisting(persistEnrollments);
        persistentSubscription = ApplicationState.RegisterOnPersisting(persistEnrollmentsCompl);

        if (!ApplicationState.TryTakeFromJson<List<Enrollment>>(
                "enrollments", out var restoredEnrollments) || !ApplicationState.TryTakeFromJson<List<Enrollment>>(
                "enrollmentsComp", out var restoredEnrollmentsCompl))
        {
            await LoadEnrollments();
        }
        else
        {
            Enrollments = restoredEnrollments!;
            EnrollmentsCompleted = restoredEnrollmentsCompl!;
        }
    }

    private async Task LoadEnrollments()
    {
        var enrollments = await EnrollmentService.GetUserEnrollmentDataAsync(CurUserId);
        Enrollments?.Clear();
        if (enrollments == null) return;
        Enrollments = enrollments.Where(e => e.EnrollmentStatus != "Completed").OrderByDescending(e => e.LastAccessed).ToList();
        EnrollmentsCompleted = enrollments.Where(e => e.EnrollmentStatus == "Completed").OrderByDescending(e => e.LastAccessed).ToList();
    }

    public async Task OpenCourse(Enrollment enrollment)
    {
        if (enrollment.LatestLessonId == null)
        {
            var firstLessonId = await CourseService.GetLessonIdForCourseAsync(enrollment.CourseId, 1);
            enrollment.LatestLessonId = firstLessonId;
            await CreateProgressRecord(firstLessonId);
        }
        enrollment.LastAccessed = DateTime.Now;
        await EnrollmentService.UpdateLastAccessedTimeAsync(enrollment);
        var id = enrollment.CourseId;
        NavigationManager.NavigateTo($"/coursepages/learning/{id}");
    }

    private async Task<LessonProgress> CreateProgressRecord(int lessonId)
    {
        var newProgress = new LessonProgress
            {
                UserId = CurUserId,
                LessonId = lessonId,
                LessonStatus = "In Progress"
            };

        return await LessonProgressService.AddLessonProgressRecordAsync(newProgress);
    }
}
