@page "/mycourses"
@rendermode InteractiveAuto

<h3>My Courses</h3>
<h4>A list of courses you are enrolled to:</h4>

<table class="table">
    <thead>
        <tr>
            <th>Course Title</th>
            <th>Your progress</th>
            <th>Lessons Total</th>
            <th>Status</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var enrollment in Enrollments)
        {
            <tr>
                <td>@enrollment.Course.Title</td>
                <td>@enrollment.LatestLesson.LessonOrder</td>
                <td>@enrollment.Course.Duration</td>
                <td>@enrollment.EnrollmentStatus</td>
                <td><button class="btn btn-primary" @onclick="() => OpenCourse(enrollment)">Open</button></td>
            </tr>
        }
    </tbody>
</table>

<br />
<h4>A list of courses you completed:</h4>

<table class="table">
    <thead>
        <tr>
            <th>Course Title</th>
            <th>Your progress</th>
            <th>Lessons Total</th>
            <th>Status</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var enrollment in EnrollmentsCompleted)
        {
            <tr>
                <td>@enrollment.Course.Title</td>
                <td>@enrollment.LatestLesson.LessonOrder</td>
                <td>@enrollment.Course.Duration</td>
                <td>@enrollment.EnrollmentStatus</td>
                <td><button class="btn btn-primary" @onclick="() => OpenCourse(enrollment)">Open</button></td>
            </tr>
        }
    </tbody>
</table>

@code {
    private string CurUserId { get; set; }
    private List<Enrollment> Enrollments { get; set; } = new List<Enrollment>();
    private List<Enrollment> EnrollmentsCompleted { get; set; } = new List<Enrollment>();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        CurUserId = user.FindFirstValue(ClaimTypes.NameIdentifier);

        await LoadEnrollments();
    }

    private async Task LoadEnrollments()
    {
        var enrollments = await EnrollmentService.GetUserEnrollmentDataAsync(CurUserId);
        Enrollments?.Clear();
        if (enrollments == null) return;
        Enrollments = enrollments.Where(e => e.EnrollmentStatus != "Completed").OrderByDescending(e => e.LastAccessed).ToList();
        EnrollmentsCompleted = enrollments.Where(e => e.EnrollmentStatus == "Completed").OrderByDescending(e => e.LastAccessed).ToList();
    }

    public async Task OpenCourse(Enrollment enrollment)
    {
        if (enrollment.LatestLessonId == null)
        {
            var firstLessonId = await CourseService.GetLessonIdForCourseAsync(enrollment.CourseId, 1);
            enrollment.LatestLessonId = firstLessonId;
            await CreateProgressRecord(firstLessonId);
        }
        enrollment.LastAccessed = DateTime.Now;
        await EnrollmentService.UpdateLastAccessedTimeAsync(enrollment);
        var id = enrollment.CourseId;
        NavigationManager.NavigateTo($"/coursepages/learning/{id}");
    }

    private async Task<LessonProgress> CreateProgressRecord(int lessonId)
    {
        var newProgress = new LessonProgress
            {
                UserId = CurUserId,
                LessonId = lessonId,
                LessonStatus = "In Progress"
            };

        return await LessonProgressService.AddLessonProgressRecordAsync(newProgress);
    }
}
