@rendermode InteractiveAuto

<div class="t-py-4 t-px-8">

    <h4 class="t-mt-3 t-mb-3 md:t-mb-10 t-text-center t-text-2xl t-font-extrabold t-leading-none t-tracking-tight t-text-gray-900 md:t-text-3xl lg:t-text-4xl dark:t-text-white"><mark class="t-px-2 t-text-white t-bg-gradient-to-br t-from-green-400 t-to-blue-600 t-rounded dark:t-bg-blue-500">@Lesson.LessonTitle</mark></h4>

    <h4 class="t-mt-8 t-mb-3 t-text-gray-600 t-mx-4 md:t-mx-20 text-xl t-font-bold t-leading-none t-tracking-tight md:t-text-2xl">Read Description</h4>
    <hr class="t-h-1 t-mx-4 md:t-mx-20 t-my-4 t-bg-gray-800 t-border-4 t-rounded md:t-my-2">
    <p class="t-text-gray-500 t-mx-4 md:t-mx-20">@Lesson.LessonDescription</p>

    <h4 class="t-mt-8 t-mb-3 t-text-gray-600 t-mx-4 md:t-mx-20 text-xl t-font-bold t-leading-none t-tracking-tight md:t-text-2xl">Watch the Video</h4>
    <hr class="t-h-1 t-mb-2 t-mx-4 md:t-mx-20 t-my-4 t-bg-gray-800 t-border-4 t-rounded md:t-my-2">
    <div class="t-flex t-justify-center t-mt-4">
        @if (EmbedLink is not null)
        {
            <iframe class="md:t-w-[560px] md:t-h-[315px]"
                    src="@EmbedLink"
                    title="YouTube video player"
                    frameborder="0"
                    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                    allowfullscreen></iframe>
        }
    </div>

    <h4 class="t-mt-8 t-mb-3 t-text-gray-600 t-mx-4 md:t-mx-20 text-xl t-font-bold t-leading-none t-tracking-tight md:t-text-2xl">Read Material</h4>
    <hr class="t-h-1 t-mx-4 md:t-mx-20 t-my-4 t-bg-gray-800 t-border-4 t-rounded md:t-my-2">
    <p class="t-text-gray-500 t-mx-4 md:t-mx-20">@Lesson.LessonContent</p>

    <h4 class="t-mt-8 t-mb-3 t-text-gray-600 t-mx-4 md:t-mx-20 text-xl t-font-bold t-leading-none t-tracking-tight md:t-text-2xl">Additional Content</h4>
    <hr class="t-h-1 t-mx-4 md:t-mx-20 t-my-4 t-bg-gray-800 t-border-4 t-rounded md:t-my-2">
    <div class="t-flex t-justify-center t-mt-6">
        <img class="t-w-full t-max-w-[600px] t-min-w-[300px]" src="@Lesson.LessonImageUrl" />
    </div>
</div>

@code {
    [Parameter]
    public Lesson Lesson { get; set; }
    [Parameter]
    public string CurUserId { get; set; }
    public string EmbedLink { get; set; }

    protected async Task FetchEmbedLink()
    {
        EmbedLink = null;
        var videoId = GetYouTubeVideoId(Lesson.LessonVideoUrl);
        if (videoId is not null)
        {
            EmbedLink = "https://www.youtube.com/embed/" + videoId;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await FetchEmbedLink();
    }

    public string GetYouTubeVideoId(string youtubeUrl)
    {
        // Check if the URL is valid
        if (Uri.TryCreate(youtubeUrl, UriKind.Absolute, out Uri uriResult) &&
            (uriResult.Scheme == Uri.UriSchemeHttp || uriResult.Scheme == Uri.UriSchemeHttps))
        {
            // Split the URL by '?' and '&', then find the parameter with key 'v'
            string[] queryParams = uriResult.Query.TrimStart('?').Split('&');
            foreach (string param in queryParams)
            {
                string[] keyValue = param.Split('=');
                if (keyValue.Length == 2 && keyValue[0] == "v")
                {
                    // Return the value of the 'v' parameter (YouTube video ID)
                    string videoId = keyValue[1];

                    // If there's additional text after the video ID (e.g., &t=312s), remove it
                    int index = videoId.IndexOf('&');
                    if (index != -1)
                    {
                        videoId = videoId.Substring(0, index);
                    }

                    return videoId;
                }
            }
        }

        // If no 'v' parameter found or URL is invalid, return null
        return null;
    }
}
