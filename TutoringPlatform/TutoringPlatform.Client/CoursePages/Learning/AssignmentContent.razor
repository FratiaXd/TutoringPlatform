<div class="t-py-4 t-px-8">
    <h4 class="t-text-center t-mt-3 t-mb-3 md:t-mb-10 t-text-gray-600 t-mx-4 md:t-mx-20 t-text-2xl t-font-bold t-leading-none t-tracking-tight md:t-text-4xl">@Assignment.TaskName</h4>

    @if (!AssignmentCompleted)
    {
        <h4 class="t-mt-8 t-mb-3 t-text-gray-600 t-mx-4 md:t-mx-20 text-xl t-font-bold t-leading-none t-tracking-tight md:t-text-2xl">Task Description</h4>
        <hr class="t-h-1 t-mx-4 md:t-mx-20 t-my-4 t-bg-gray-800 t-border-4 t-rounded md:t-my-2">
        <p class="t-text-gray-500 t-mx-4 md:t-mx-20">@Assignment.TaskDescription</p>
        <EditForm Model="Input" FormName="assignment" OnValidSubmit="SubmitAssignment" method="post">
            <DataAnnotationsValidator />
            <div class="t-mx-4 md:t-mx-20">
                <label for="answer" class="t-mt-8 t-mb-2 md:t-mb-0.5 t-text-gray-600 text-xl t-font-bold t-leading-none t-tracking-tight md:t-text-2xl">Your Answer</label>
                <hr class="t-h-1 t-my-2 t-bg-gray-800 t-border-4 t-rounded md:t-my-2">
                <div class="t-mt-5 md:t-mt-4">
                    <InputTextArea @bind-Value="Input.AssignmentAnswer" class="form-control" placeholder="Assignment answer." />
                </div>
                <ValidationMessage For="() => Input.AssignmentAnswer" class="text-danger" />
            </div>
            <div class="t-mx-4 md:t-mx-20 t-mt-4 md:t-mt-8 t-flex t-justify-center">
                <button type="submit" class="t-text-white t-mx-auto  t-bg-grn hover:t-bg-drkgrn focus:t-ring-4 focus:t-outline-none focus:t-ring-lgrn t-font-medium t-rounded-lg t-text-sm t-w-64 t-px-5 t-py-2.5">Submit</button>
            </div>
        </EditForm>
    }
    else
    {
        <p class="t-text-center t-mb-3 t-text-gray-600 t-text-xl md:t-text-2xl t-font-semibold">Thank you for your submission.</p>
        <p class="t-text-center t-mb-3 t-text-gray-500">Personal Feedback will be available soon in the Feedback section.</p>
    }
</div>

@code {
    [Parameter]
    public Assignment Assignment { get; set; }
    [Parameter]
    public string CurUserId { get; set; }
    [Parameter]
    public bool AssignmentCompleted { get; set; }
    [Parameter]
    public EventCallback<LessonProgress> UpdateLessonProgress { get; set; }

    private InputModel Input { get; set; } = new();

    private async Task SubmitAssignment()
    {
        var addAssignment = new LessonProgress
        {
            UserId = CurUserId,
            LessonId = Assignment.LessonId,
            SubmittedAssignment = Input.AssignmentAnswer,
            FeedbackStatus = "Waiting",
            FeedbackTimeStamp = DateTime.Now
        };

        var updatedLessonProgress = await LessonProgressService.SubmitAssignmentAsync(addAssignment);
        await UpdateLessonProgress.InvokeAsync(updatedLessonProgress);
        AssignmentCompleted = true;
    }

    private sealed class InputModel
    {
        [Required]
        public string? AssignmentAnswer { get; set; }
    }
}
