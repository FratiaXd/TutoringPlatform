@page "/coursepages/learning/{CourseId:int}"
@using TutoringPlatform.Client.CoursePages.Shared
@rendermode InteractiveAuto
@inherits LayoutComponentBase

<div>
    <div class="row align-items-center">
        <div class="col">
            <h2>CourseLearning</h2>
        </div>
        <div class="col text-end">
            <Button Color="ButtonColor.Secondary" @onclick="GoBack">Go Back</Button>
            <Button Color="ButtonColor.Primary" @onclick="GoToNext">Go to Next</Button>
        </div>
    </div>
    <hr />
    <div class="row">
        <div class="col-md-3">
            <LearningSidebar CourseId="@CourseId" CurUserId="@CurUserId" Lessons="@lessons"
                OnLessonClicked="HandleLessonClicked"
                OnQuizClicked="HandleQuizClicked"
                OnAssignmentClicked="HandleAssignmentClicked" />
        </div>
        <div class="col-md-9">
            @if (selectedLesson != null)
            {
                <LessonContent Lesson="@selectedLesson" CurUserId="@CurUserId" />
            }
            else if (selectedQuiz != null)
            {
                <QuizContent Quiz="@selectedQuiz" CurUserId="@CurUserId" />
            }
            else if (selectedAssignment != null)
            {
                <AssignmentContent Assignment="@selectedAssignment" 
                    CurUserId="@CurUserId" 
                    UpdateLessonProgress="UpdateLessonProgress" 
                    AssignmentCompleted="@AssignmentCompleted"/>
            }
        </div>
    </div>
</div>


@code {
    [Parameter]
    public int CourseId { get; set; }
    private string CurUserId { get; set; }
    private Lesson selectedLesson;
    private Quiz selectedQuiz;
    private Assignment selectedAssignment;
    private Lesson currentLessonOpen { get; set; }
    private List<Lesson> lessons;
    public bool AssignmentCompleted { get; set; }

    private async Task HandleLessonClicked(Lesson lesson)
    {
        selectedLesson = lesson;
        selectedQuiz = null; // Reset other selections
        selectedAssignment = null;
        currentLessonOpen = lesson;
    }

    private async Task HandleQuizClicked(Lesson lesson)
    {
        selectedLesson = null; // Reset other selections
        selectedQuiz = lesson.Quiz;
        selectedAssignment = null;
        currentLessonOpen = lesson;
    }

    private async Task HandleAssignmentClicked(Lesson lesson)
    {
        selectedLesson = null; // Reset other selections
        selectedQuiz = null;
        selectedAssignment = lesson.Assignment;
        currentLessonOpen = lesson;
        var l = currentLessonOpen.LessonProgresses.ToList();
        if (l[0].SubmittedAssignment != null)
        {
            AssignmentCompleted = true;
        }
        else { AssignmentCompleted = false; }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        CurUserId = user.FindFirstValue(ClaimTypes.NameIdentifier);
        await LoadLessons();
    }

    private async Task LoadLessons()
    {
        lessons = new List<Lesson>();
        var lessonsList = await LessonService.GetAllCourseLessonsQAndLAsync(CourseId, CurUserId);
        if (lessonsList != null)
        {
            lessons.AddRange(lessonsList);
        }
    }

    private void UpdateLessonProgress(LessonProgress updatedProgress)
    {
        var lessonToUpdate = lessons.FirstOrDefault(l => l.LessonId == updatedProgress.LessonId);
        if (lessonToUpdate != null)
        {
            // Update the LessonProgress property of the lesson
            var lessonProgressList = lessonToUpdate.LessonProgresses.ToList();
            lessonProgressList[0] = updatedProgress;
            lessonToUpdate.LessonProgresses = lessonProgressList;
        }
    }

    private async Task GoToNext()
    {
        if (currentLessonOpen.IsAutograded == false && currentLessonOpen.IsAssessed == false)
        {
            var lessonCompleted = new LessonProgress
            {
                UserId = CurUserId,
                LessonId = currentLessonOpen.LessonId,
                LessonStatus = "Completed"
            };
            await NextLesson(lessonCompleted);
        }
        //need to go to quiz or assignment and check if they are submitted
    }

    private async Task NextLesson(LessonProgress updLesson)
    {
        await LessonProgressService.FinishLessonAsync(updLesson);
        int nextLessonOrder = currentLessonOpen.LessonOrder + 1;
        var nextLesson = lessons.FirstOrDefault(l => l.LessonOrder == nextLessonOrder);
        if (nextLesson != null)
        {
            // Invoke the lesson clicked event callback to render the next lesson content
            //need to update enrollment data as well
            var enrollmentUpd = new Enrollment
            {
                UserId = CurUserId,
                CourseId = CourseId,
                LatestLessonId = nextLesson.LessonId,
                EnrollmentStatus = "In Progress"
            };
            await EnrollmentService.UpdateEnrollmentDetailsAsync(enrollmentUpd);

            var lessonProgressUpd = new LessonProgress
            {
                UserId = CurUserId,
                LessonId = nextLesson.LessonId,
                LessonStatus = "In Progress"
            };
            var result = await LessonProgressService.AddLessonProgressRecordAsync(lessonProgressUpd);
            nextLesson.LessonProgresses.Add(result);
            await HandleLessonClicked(nextLesson);
        }
    }

    private async Task GoBack()
    {
        if (currentLessonOpen.LessonOrder == 1)
        {
            return;
        }
        else
        {
            int previousLessonOrder = currentLessonOpen.LessonOrder - 1;
            var prevLesson = lessons.FirstOrDefault(l => l.LessonOrder == previousLessonOrder);
            if (prevLesson != null)
            {
                // Invoke the lesson clicked event callback to render the next lesson content
                await HandleLessonClicked(prevLesson);
            }
        }
    }
}
