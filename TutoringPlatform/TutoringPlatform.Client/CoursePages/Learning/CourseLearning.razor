@page "/coursepages/learning/{CourseId:int}"
@using TutoringPlatform.Client.CoursePages.Shared
@rendermode InteractiveAuto
@inherits LayoutComponentBase

<Toasts class="p-3" Messages="messages" Placement="ToastsPlacement.TopRight" />

<div>
    <div class="row align-items-center">
        <div class="col">
            <h2>CourseLearning</h2>
        </div>
        <div class="col text-end">
            <Button Color="ButtonColor.Secondary" @onclick="GoBack">Go Back</Button>
            <Button Color="ButtonColor.Primary" @onclick="GoToNext">Go to Next Lesson</Button>
        </div>
    </div>
    <hr />
    <div class="row">
        <div class="col-md-3">
            <LearningSidebar CourseId="@CourseId" CurUserId="@CurUserId" Lessons="@lessons"
                OnLessonClicked="HandleLessonClicked"
                OnQuizClicked="HandleQuizClicked"
                OnAssignmentClicked="HandleAssignmentClicked" />
        </div>
        <div class="col-md-9">
            @if (selectedLesson != null)
            {
                <LessonContent Lesson="@selectedLesson" CurUserId="@CurUserId" />
            }
            else if (selectedQuiz != null)
            {
                <QuizContent Quiz="@selectedQuiz" CurUserId="@CurUserId"
                    QuizScore="@QuizScore"
                    UpdateLessonProgress="UpdateLessonProgress"
                    QuizCompleted="@QuizCompleted"/>
            }
            else if (selectedAssignment != null)
            {
                <AssignmentContent Assignment="@selectedAssignment" 
                    CurUserId="@CurUserId" 
                    UpdateLessonProgress="UpdateLessonProgress" 
                    AssignmentCompleted="@AssignmentCompleted"/>
            }
        </div>
    </div>
</div>


@code {
    [Parameter]
    public int CourseId { get; set; }
    private string CurUserId { get; set; }
    private Lesson selectedLesson;
    private Quiz selectedQuiz;
    private Assignment selectedAssignment;
    private Lesson currentLessonOpen { get; set; }
    private List<Lesson> lessons;
    public bool AssignmentCompleted { get; set; }
    public bool QuizCompleted { get; set; }
    public string? QuizScore { get; set; }
    List<ToastMessage> messages = new List<ToastMessage>();

    private async Task HandleLessonClicked(Lesson lesson)
    {
        selectedLesson = lesson;
        selectedQuiz = null; // Reset other selections
        selectedAssignment = null;
        currentLessonOpen = lesson;
    }

    private async Task HandleQuizClicked(Lesson lesson)
    {
        selectedLesson = null; // Reset other selections
        selectedQuiz = lesson.Quiz;
        selectedAssignment = null;
        currentLessonOpen = lesson;
        var l = currentLessonOpen.LessonProgresses.ToList();
        if (l[0].QuizGrade != null)
        {
            QuizCompleted = true;
            QuizScore = l[0].QuizGrade;
        }
        else { QuizCompleted = false; }
    }

    private async Task HandleAssignmentClicked(Lesson lesson)
    {
        selectedLesson = null; // Reset other selections
        selectedQuiz = null;
        selectedAssignment = lesson.Assignment;
        currentLessonOpen = lesson;
        var l = currentLessonOpen.LessonProgresses.ToList();
        if (l[0].SubmittedAssignment != null)
        {
            AssignmentCompleted = true;
        }
        else { AssignmentCompleted = false; }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        CurUserId = user.FindFirstValue(ClaimTypes.NameIdentifier);
        await LoadLessons();
    }

    private async Task LoadLessons()
    {
        lessons = new List<Lesson>();
        var lessonsList = await LessonService.GetAllCourseLessonsQAndLAsync(CourseId, CurUserId);
        if (lessonsList != null)
        {
            lessons.AddRange(lessonsList);
        }
    }

    private void UpdateLessonProgress(LessonProgress updatedProgress)
    {
        var lessonToUpdate = lessons.FirstOrDefault(l => l.LessonId == updatedProgress.LessonId);
        if (lessonToUpdate != null)
        {
            // Update the LessonProgress property of the lesson
            var lessonProgressList = lessonToUpdate.LessonProgresses.ToList();
            lessonProgressList[0] = updatedProgress;
            lessonToUpdate.LessonProgresses = lessonProgressList;
        }
    }

    private async Task GoToNext()
    {
        bool isLessonCompleted = false;
        //Checks if user opens new lesson or just navigates between already completed lessons
        if (currentLessonOpen.LessonProgresses.First().LessonStatus == "Completed")
        {
            isLessonCompleted = true;
        }

        var lessonCompleted = new LessonProgress
            {
                UserId = CurUserId,
                LessonId = currentLessonOpen.LessonId,
                LessonStatus = "Completed"
            };

        bool hasAllAnswers = CheckSubmittedAnswers(currentLessonOpen);
        if (hasAllAnswers)
        {
            await NextLesson(lessonCompleted, isLessonCompleted);
        }
        else
        {
            ShowMessage(ToastType.Secondary, "Please complete all tasks in the current lesson.");
        }
    }

    private async Task NextLesson(LessonProgress updLesson, bool isCompleted)
    {
        int nextLessonOrder = currentLessonOpen.LessonOrder + 1;
        var nextLesson = lessons.FirstOrDefault(l => l.LessonOrder == nextLessonOrder);
        if (!isCompleted)
        {
            await LessonProgressService.FinishLessonAsync(updLesson);
        }
        if (nextLesson != null && !isCompleted)
        {
            var enrollmentUpd = new Enrollment
            {
                UserId = CurUserId,
                CourseId = CourseId,
                LatestLessonId = nextLesson.LessonId,
                EnrollmentStatus = "In Progress"
            };
            await EnrollmentService.UpdateEnrollmentDetailsAsync(enrollmentUpd);

            var lessonProgressUpd = new LessonProgress
            {
                UserId = CurUserId,
                LessonId = nextLesson.LessonId,
                LessonStatus = "In Progress"
            };
            var result = await LessonProgressService.AddLessonProgressRecordAsync(lessonProgressUpd);
            nextLesson.LessonProgresses.Add(result);
            await HandleLessonClicked(nextLesson);
        }
        else if (nextLesson != null && isCompleted)
        {
            await HandleLessonClicked(nextLesson);
        }
    }

    private bool CheckSubmittedAnswers(Lesson lessonToCheck)
    {
        var lessonProgressList = lessonToCheck.LessonProgresses.ToList();
        if (lessonToCheck.IsAutograded && lessonToCheck.IsAssessed)
        {
            return lessonProgressList.Any(lp => lp.QuizGrade != null && lp.SubmittedAssignment != null);
        }
        else
        {
            if (lessonToCheck.IsAutograded)
            {
                return lessonProgressList.Any(lp => lp.QuizGrade != null);
            }

            if (lessonToCheck.IsAssessed)
            {
                return lessonProgressList.Any(lp => lp.SubmittedAssignment != null);
            }
        }
        return true;
    }

    private async Task GoBack()
    {
        if (currentLessonOpen.LessonOrder == 1)
        {
            ShowMessage(ToastType.Secondary, "Cant go back further.");
            return;
        }
        else
        {
            int previousLessonOrder = currentLessonOpen.LessonOrder - 1;
            var prevLesson = lessons.FirstOrDefault(l => l.LessonOrder == previousLessonOrder);
            if (prevLesson != null)
            {
                // Invoke the lesson clicked event callback to render the next lesson content
                await HandleLessonClicked(prevLesson);
            }
        }
    }

    private void ShowMessage(ToastType toastType, string message) => messages.Add(CreateToastMessage(toastType, message));

    private ToastMessage CreateToastMessage(ToastType toastType, string message)
    => new ToastMessage
        {
            Type = toastType,
            Message = message,
        };
}
