@page "/cart"
@using TutoringPlatform.Shared.Responses
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))

<Toasts class="p-3" Messages="messages" Placement="ToastsPlacement.TopRight" />

@if (CartService.IsCartLoaderVisible)
{
    <p>Loading...</p>
}
else
{
    <h3>Cart</h3>

    <table class="table">
        <thead>
            <tr>
                <th>#</th>
                <th>Course Title</th>
                <th>Image</th>
                <th>Price</th>
                <th>Quantity</th>
                <th>Subtotal</th>
                <th>Remove</th>
            </tr>
        </thead>
        <tbody>
            @if (MyCartOrders is not null)
            {
                var listData = MyCartOrders.Skip(SkipValue).Take(TakeValue).ToList();
                int count = 1;
                foreach (var item in listData)
                {
                    <tr>
                        <td>@count</td>
                        <td>@item.Name</td>
                        <td>@item.Image</td>
                        <td>@item.Price</td>
                        <td>@item.Quantity</td>
                        <td>@item.SubTotal</td>
                        <td>
                            <Button Color="ButtonColor.Danger" @onclick="async () => await DeleteCart(item)">Delete</Button>
                        </td>
                    </tr>
                    count++;
                }
            }
        </tbody>
    </table>
    <br />
    <p>Total Items: @MyCartOrders!.Count</p>
    <p>Total Price: @MyCartOrders.Sum(c => c.SubTotal).ToString("#.##")</p>
    <Button Color="ButtonColor.Success" @onclick="Checkout">Proceed To Checkout</Button>
}

@code {
    private string CurUserId { get; set; }
    public int SkipValue;
    public int TakeValue = 3;
    List<ToastMessage> messages = new List<ToastMessage>();
    List<Order> MyCartOrders = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        CurUserId = user.FindFirstValue(ClaimTypes.NameIdentifier);

        MyCartOrders = await CartService.MyOrders(CurUserId);      
    }

    public async Task DeleteCart(Order cart)
    {
        MyCartOrders.Remove(MyCartOrders.FirstOrDefault(c => c.CourseId == cart.CourseId)!);
        var response = await CartService.DeleteCart(cart);
        ShowMessage(ToastType.Secondary, response.Message);
    }

    public async Task Checkout()
    {
        if (MyCartOrders is null)
        {
            ShowMessage(ToastType.Secondary, "No items in the cart.");
        }

        var url = await CartService.Checkout(MyCartOrders!);
        NavigationManager.NavigateTo(url);
    }

    private void ShowMessage(ToastType toastType, string message) => messages.Add(CreateToastMessage(toastType, message));

    private ToastMessage CreateToastMessage(ToastType toastType, string message)
    => new ToastMessage
        {
            Type = toastType,
            Message = message,
        };
}
