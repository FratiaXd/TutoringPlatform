@page "/browse"
@using TutoringPlatform.Client.PrivateInterfaces
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@inject ICart CartService

<Toasts class="p-3" Messages="messages" Placement="ToastsPlacement.TopRight" />

<h3>BrowseCourses</h3>

<div class="card">
    @if (Courses.Count > 0)
    {
        <div class="card-header">Course List</div>
        <div class="card-body">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Course Id</th>
                        <th>Course Title</th>
                        <th>Course Price</th>
                        <th>Actions</th>
                        <th>Cart</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var course in Courses)
                    {
                        <tr>
                            <td>@course.CourseId</td>
                            <td>@course.Title</td>
                            <td>@course.Price</td>
                            <td>
                                <Button Color="ButtonColor.Success" @onclick="() => OpenCourse(course)">Open</Button>
                            </td>
                            <td>
                                @if (course.Price > 0)
                                {
                                    <Button Color="ButtonColor.Success" @onclick="() => AddToCart(course)">Add to cart</Button>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    private List<Course> Courses { get; set; } = new List<Course>();
    List<ToastMessage> messages = new List<ToastMessage>();

    protected override async Task OnInitializedAsync()
    {
        await LoadCourses();
    }

    private async Task LoadCourses()
    {
        var courses = await CourseService.GetPublishedCoursesAsync();
        Courses?.Clear();
        if (courses == null) return;
        Courses = courses.ToList();
    }

    private void OpenCourse(Course course)
    {
        NavigationManager.NavigateTo($"coursepreview/{course.CourseId}");
    }

    private async Task AddToCart(Course course)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated == true)
        {
            var response = await CartService.AddToCart(course);
            ShowMessage(ToastType.Secondary, response.Message);
        }
        else
        {
            NavigationManager.NavigateTo("Account/Login");
        }
    }

    private void ShowMessage(ToastType toastType, string message) => messages.Add(CreateToastMessage(toastType, message));

    private ToastMessage CreateToastMessage(ToastType toastType, string message)
    => new ToastMessage
        {
            Type = toastType,
            Message = message,
        };
}
