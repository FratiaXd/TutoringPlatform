@page "/browse"
@using TutoringPlatform.Client.PrivateInterfaces
@* @rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false)) *@
@rendermode InteractiveWebAssembly
@inject ICartService CartService


@if (isClientSide)
{

    <Toasts class="p-3" Messages="messages" Placement="ToastsPlacement.TopRight" />

    <h3>BrowseCourses</h3>

    <div class="card">
        @if (Courses.Count > 0)
        {
            <div class="card-header">Course List</div>
            <div class="card-body">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Course Id</th>
                            <th>Course Title</th>
                            <th>Course Price</th>
                            <th>Actions</th>
                            <th>Cart</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var course in Courses)
                        {
                            <tr>
                                <td>@course.CourseId</td>
                                <td>@course.Title</td>
                                <td>@course.Price</td>
                                <td>
                                    <Button Color="ButtonColor.Success" @onclick="() => OpenCourse(course)">Open</Button>
                                </td>
                                <td>
                                    @if (user.Identity.IsAuthenticated)
                                    {
                                        if (course.Price > 0 && !IsCoursePurchased(course.CourseId))
                                        {
                                            <Button Color="ButtonColor.Success" @onclick="() => AddToCart(course)">Add to cart</Button>
                                        }
                                        else if (IsCoursePurchased(course.CourseId))
                                        {
                                            <p>In your library.</p>
                                        }
                                    }
                                    else if (course.Price > 0)
                                    {
                                        <Button Color="ButtonColor.Success" @onclick="() => AddToCart(course)">Add to cart</Button>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
}
else
{
    <div role="status" class="space-y-8 animate-pulse md:space-y-0 md:space-x-8 rtl:space-x-reverse md:flex md:items-center">
        <div class="flex items-center justify-center w-full h-48 bg-gray-300 rounded sm:w-96 dark:bg-gray-700">
            <svg class="w-10 h-10 text-gray-200 dark:text-gray-600" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 18">
                <path d="M18 0H2a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2Zm-5.5 4a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3Zm4.376 10.481A1 1 0 0 1 16 15H4a1 1 0 0 1-.895-1.447l3.5-7A1 1 0 0 1 7.468 6a.965.965 0 0 1 .9.5l2.775 4.757 1.546-1.887a1 1 0 0 1 1.618.1l2.541 4a1 1 0 0 1 .028 1.011Z" />
            </svg>
        </div>
        <div class="w-full">
            <div class="h-2.5 bg-gray-200 rounded-full dark:bg-gray-700 w-48 mb-4"></div>
            <div class="h-2 bg-gray-200 rounded-full dark:bg-gray-700 max-w-[480px] mb-2.5"></div>
            <div class="h-2 bg-gray-200 rounded-full dark:bg-gray-700 mb-2.5"></div>
            <div class="h-2 bg-gray-200 rounded-full dark:bg-gray-700 max-w-[440px] mb-2.5"></div>
            <div class="h-2 bg-gray-200 rounded-full dark:bg-gray-700 max-w-[460px] mb-2.5"></div>
            <div class="h-2 bg-gray-200 rounded-full dark:bg-gray-700 max-w-[360px]"></div>
        </div>
        <span class="sr-only">Loading...</span>
    </div>
}

@code {
    private List<Course> Courses { get; set; } = new List<Course>();
    private List<Enrollment> Enrollments { get; set; } = new List<Enrollment>();
    List<ToastMessage> messages = new List<ToastMessage>();
    private string CurUserId { get; set; }
    private ClaimsPrincipal? user { get; set; }
    private bool isClientSide = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadCourses();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;
        if (user.Identity?.IsAuthenticated == true)
        {
            CurUserId = user.FindFirstValue(ClaimTypes.NameIdentifier);
            var result = await EnrollmentService.GetAllUserEnrollmentsAsync(CurUserId);
            Enrollments = result.ToList();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isClientSide = true;
            StateHasChanged(); // Re-render the component now that we're past the initial prerendering phase
        }
    }

    private async Task LoadCourses()
    {
        var courses = await CourseService.GetPublishedCoursesAsync();
        Courses?.Clear();
        if (courses == null) return;
        Courses = courses.ToList();
    }

    private void OpenCourse(Course course)
    {
        NavigationManager.NavigateTo($"coursepreview/{course.CourseId}");
    }

    private async Task AddToCart(Course course)
    {
        if (user.Identity?.IsAuthenticated == true)
        {
            var response = await CartService.AddToCart(course);
            ShowMessage(ToastType.Secondary, response.Message);
        }
        else
        {
            NavigationManager.NavigateTo("Account/Login");
        }
    }

    private bool IsCoursePurchased(int courseId)
    {
        return Enrollments.Any(e => e.CourseId == courseId);
    }

    private void ShowMessage(ToastType toastType, string message) => messages.Add(CreateToastMessage(toastType, message));

    private ToastMessage CreateToastMessage(ToastType toastType, string message)
    => new ToastMessage
        {
            Type = toastType,
            Message = message,
        };
}
