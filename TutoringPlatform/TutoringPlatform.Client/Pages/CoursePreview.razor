@page "/coursepreview/{CourseId:int}"
@rendermode @(new InteractiveAutoRenderMode(prerender: false))

<h3>CoursePreview</h3>

<h4>@displayCourse.CourseId</h4>
<h4>@displayCourse.Title</h4>
<h4>@displayCourse.Price</h4>
<h4>@displayCourse.Description</h4>
<h4>@displayCourse.AccessLevel</h4>

@if (IsEnrolled)
{
    <p>You are already enrolled to this course.</p>
    <Button Color="ButtonColor.Primary" @onclick="OpenCourse">Continue Course</Button>
}
else if (displayCourse.AccessLevel == "Paid")
{
    <Button Color="ButtonColor.Primary">Add to cart</Button>
}
else if (displayCourse.AccessLevel == "Free")
{
    <Button Color="ButtonColor.Primary" @onclick="EnrollStudent">Enroll</Button>
}

@code {
    [Parameter]
    public int CourseId { get; set; }
    public Course displayCourse { get; set; } = new();
    private string CurUserId { get; set; }
    private string Email { get; set; } 
    private bool IsEnrolled { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadCourse();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        CurUserId = user.FindFirstValue(ClaimTypes.NameIdentifier);
        Email = user.FindFirstValue(ClaimTypes.Email);

        IsEnrolled = await IsUserEnrolled();
    }

    private async Task LoadCourse()
    {
        var course = await CourseService.GetCourseByIdAsync(CourseId);
        if (course == null) return;

        displayCourse = course;
    }

    private async Task EnrollStudent()
    {
        var firstLessonId = await CourseService.GetLessonIdForCourseAsync(CourseId, 1);

        var newEnrollment = new Enrollment
        {
            UserId = CurUserId,
            CourseId = CourseId,
            LatestLessonId = firstLessonId,
            EnrollmentStatus = "In Progress"
        };

        var enrollment = await EnrollmentService.EnrollUserAsync(newEnrollment);
        if (enrollment != null)
        {
            OpenCourse();
        }
        else
        {
            return;
        }

    }

    public void OpenCourse()
    {
        NavigationManager.NavigateTo($"/coursepages/learning/{CourseId}");
    }

    private async Task<bool> IsUserEnrolled()
    {
        var enrollments = await EnrollmentService.GetAllUserEnrollmentsAsync(CurUserId);
        if (enrollments == null) return false;
        var enrollmentList = enrollments.ToList();

        foreach (var enrollment in enrollmentList)
        {
            if (enrollment.CourseId == CourseId)
            {
                return true; // User is enrolled in this course
            }
        }

        return false; // User is not enrolled in this course
    }
}
