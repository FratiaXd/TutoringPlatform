@page "/feedback"
@using Microsoft.AspNetCore.Authorization
@rendermode InteractiveAuto
@* @implements IDisposable *@
@inject PersistentComponentState ApplicationState
@attribute [Authorize]

<PageTitle>Feedback</PageTitle>

<div class="t-flex t-flex-col text-center t-mt-8">
    <h3 class="t-text-3xl t-text-prim t-font-bold md:t-text-4xl">Feedback</h3>
    <p class="t-mb-4 t-mt-1 t-text-lg t-font-normal t-text-gray-500 dark:t-text-gray-400">View your personal feedback for completed Assignments.</p>
    <hr class="t-h-1 t-mx-4 md:t-mx-20 t-my-4 t-bg-gray-800 t-border-4 t-rounded md:t-my-2">
</div>

<div class="t-flex t-flex-col text-center t-mt-3">
    <p><strong class="t-text-lg t-font-semibold t-text-gray-600">New feedback:</strong></p>
</div>

@if (UserLessonProgressesReviewed.Count > 0)
{
    <div class="t-flex t-flex-col t-mt-4 t-mb-1 t-justify-center">
        @foreach (var record in UserLessonProgressesReviewed)
        {
            <a @onclick="(e => OpenReadFeedback(record))" class="t-flex hover:t-cursor-pointer t-flex-col t-items-center md:t-flex-row md:t-justify-between md:t-mx-40 md:t-items-center t-mb-3 t-p-6 t-bg-white t-border t-border-gray-200 t-rounded-lg t-shadow hover:t-bg-gray-100">
                <h5 class="t-mb-1 t-text-xl t-font-bold t-tracking-tight t-text-gray-900 dark:t-text-white">@record.Lesson.Course.Title</h5>
                <p class="t-mb-1 md:t-mb-0 t-font-normal t-text-gray-700 dark:t-text-gray-400">@record.Lesson.LessonTitle</p>
                <p class="t-font-medium t-text-green-600 dark:t-text-gray-400">Status: @record.FeedbackStatus</p>
            </a>
        }
    </div>
}
else
{
    <p class="t-mt-6 t-mb-10 t-text-center t-text-lg t-text-gray-400 t-font-normal">Empty</p>
}

<div class="t-flex t-flex-col text-center t-mt-3">
    <p><strong class="t-text-lg t-font-semibold t-text-gray-600">Awaiting feedback:</strong></p>
</div>

@if (UserLessonProgressesAwait.Count > 0)
{
    <div class="t-flex t-flex-col t-mt-4 t-mb-1 t-justify-center">
        @foreach (var record in UserLessonProgressesAwait)
        {
            <a @onclick="(e => OpenReadFeedback(record))" class="t-flex hover:t-cursor-pointer t-flex-col t-items-center md:t-flex-row md:t-justify-between md:t-mx-40 md:t-items-center t-mb-3 t-p-6 t-bg-white t-border t-border-gray-200 t-rounded-lg t-shadow hover:t-bg-gray-100">
                <h5 class="t-mb-1 t-text-xl t-font-bold t-tracking-tight t-text-gray-900 dark:t-text-white">@record.Lesson.Course.Title</h5>
                <p class="t-mb-1 md:t-mb-0 t-font-normal t-text-gray-700 dark:t-text-gray-400">@record.Lesson.LessonTitle</p>
                <p class="t-font-medium t-text-amber-600">Status: @record.FeedbackStatus</p>
            </a>
        }
    </div>
}
else
{
    <p class="t-mt-6 t-mb-10 t-text-center t-text-lg t-text-gray-400 t-font-normal">Empty</p>
}

<div class="t-flex t-flex-col text-center t-mt-3">
    <p><strong class="t-text-lg t-font-semibold t-text-gray-600">Feedback history:</strong></p>
</div>

@if (UserLessonProgressesRest.Count > 0)
{
    <div class="t-flex t-flex-col t-mt-4 t-mb-1 t-justify-center">
        @foreach (var record in UserLessonProgressesRest)
        {
            <a @onclick="(e => OpenReadFeedback(record))" class="t-flex hover:t-cursor-pointer t-flex-col t-items-center md:t-flex-row md:t-justify-between md:t-mx-40 md:t-items-center t-mb-3 t-p-6 t-bg-white t-border t-border-gray-200 t-rounded-lg t-shadow hover:t-bg-gray-100">
                <h5 class="t-mb-1 t-text-xl t-font-bold t-tracking-tight t-text-gray-900 dark:t-text-white">@record.Lesson.Course.Title</h5>
                <p class="t-mb-1 md:t-mb-0 t-font-normal t-text-gray-700 dark:t-text-gray-400">@record.Lesson.LessonTitle</p>
                <p class="t-font-medium t-text-gray-700 dark:t-text-gray-400">Status: @record.FeedbackStatus</p>
            </a>
        }
    </div>
}
else
{
    <p class="t-mt-6 t-mb-10 t-text-center t-text-lg t-text-gray-400 t-font-normal">Empty</p>
}


@code {
    private PersistingComponentStateSubscription persistentSubscription;

    private string CurUserId { get; set; }
    private List<LessonProgress> UserLessonProgressesReviewed { get; set; } = new List<LessonProgress>();
    private List<LessonProgress> UserLessonProgressesAwait { get; set; } = new List<LessonProgress>();
    private List<LessonProgress> UserLessonProgressesRest { get; set; } = new List<LessonProgress>();

    // private Task persistReviewed()
    // {
    //     ApplicationState.PersistAsJson("reviewed", UserLessonProgressesReviewed);
    //     return Task.CompletedTask;
    // }

    // private Task persistAwaiting()
    // {
    //     ApplicationState.PersistAsJson("awaiting", UserLessonProgressesAwait);
    //     return Task.CompletedTask;
    // }

    // private Task persistSeen()
    // {
    //     ApplicationState.PersistAsJson("seen", UserLessonProgressesRest);
    //     return Task.CompletedTask;
    // }

    // void IDisposable.Dispose()
    // {
    //     persistentSubscription.Dispose();
    // }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        CurUserId = user.FindFirstValue(ClaimTypes.NameIdentifier);

        // persistentSubscription = ApplicationState.RegisterOnPersisting(persistReviewed);
        // persistentSubscription = ApplicationState.RegisterOnPersisting(persistAwaiting);
        // persistentSubscription = ApplicationState.RegisterOnPersisting(persistSeen);

        // if (!ApplicationState.TryTakeFromJson<List<LessonProgress>>(
        //         "reviewed", out var restoredReviewed) || !ApplicationState.TryTakeFromJson<List<LessonProgress>>(
        //         "awaiting", out var restoredAwaiting) || !ApplicationState.TryTakeFromJson<List<LessonProgress>>(
        //         "seen", out var restoredSeen))
        // {
        //     await LoadProgresses();
        // }
        // else
        // {
        //     UserLessonProgressesReviewed = restoredReviewed!;
        //     UserLessonProgressesAwait = restoredAwaiting!;
        //     UserLessonProgressesRest = restoredSeen!;
        // }

        await LoadProgresses();
    }

    public async Task LoadProgresses()
    {
        var progresses = await LessonProgressService.GetUserLessonProgressesAssessedAsync(CurUserId);
        UserLessonProgressesReviewed?.Clear();
        if (progresses == null) return;
        UserLessonProgressesReviewed = progresses.Where(lp => lp.FeedbackStatus == "Reviewed").ToList();
        UserLessonProgressesAwait = progresses.Where(lp => lp.FeedbackStatus == "Waiting").ToList();
        UserLessonProgressesRest = progresses.Where(lp => lp.FeedbackStatus == "Seen").ToList();
    }

    public void OpenReadFeedback(LessonProgress lessonProgress)
    {
        NavigationManager.NavigateTo($"/readfeedback/{lessonProgress.LessonProgressId}", true);
    }
}
